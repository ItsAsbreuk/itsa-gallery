if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js']) {
   __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'] = {"path":"build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0],"38":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":44},"end":{"line":1,"column":63}}},"2":{"name":"(anonymous_2)","line":114,"loc":{"start":{"line":114,"column":13},"end":{"line":114,"column":33}}},"3":{"name":"(anonymous_3)","line":138,"loc":{"start":{"line":138,"column":40},"end":{"line":138,"column":68}}},"4":{"name":"(anonymous_4)","line":141,"loc":{"start":{"line":141,"column":8},"end":{"line":141,"column":19}}},"5":{"name":"(anonymous_5)","line":145,"loc":{"start":{"line":145,"column":8},"end":{"line":145,"column":19}}},"6":{"name":"(anonymous_6)","line":155,"loc":{"start":{"line":155,"column":20},"end":{"line":155,"column":32}}},"7":{"name":"(anonymous_7)","line":166,"loc":{"start":{"line":166,"column":32},"end":{"line":166,"column":43}}},"8":{"name":"(anonymous_8)","line":169,"loc":{"start":{"line":169,"column":32},"end":{"line":169,"column":43}}},"9":{"name":"(anonymous_9)","line":176,"loc":{"start":{"line":176,"column":84},"end":{"line":176,"column":95}}},"10":{"name":"(anonymous_10)","line":179,"loc":{"start":{"line":179,"column":88},"end":{"line":179,"column":99}}},"11":{"name":"(anonymous_11)","line":445,"loc":{"start":{"line":445,"column":4},"end":{"line":445,"column":17}}},"12":{"name":"(anonymous_12)","line":446,"loc":{"start":{"line":446,"column":35},"end":{"line":446,"column":63}}},"13":{"name":"(anonymous_13)","line":453,"loc":{"start":{"line":453,"column":16},"end":{"line":453,"column":35}}},"14":{"name":"(anonymous_14)","line":456,"loc":{"start":{"line":456,"column":16},"end":{"line":456,"column":30}}},"15":{"name":"(anonymous_15)","line":463,"loc":{"start":{"line":463,"column":43},"end":{"line":463,"column":62}}},"16":{"name":"(anonymous_16)","line":475,"loc":{"start":{"line":475,"column":43},"end":{"line":475,"column":54}}},"17":{"name":"(anonymous_17)","line":495,"loc":{"start":{"line":495,"column":38},"end":{"line":495,"column":62}}},"18":{"name":"(anonymous_18)","line":513,"loc":{"start":{"line":513,"column":38},"end":{"line":513,"column":62}}},"19":{"name":"(anonymous_19)","line":517,"loc":{"start":{"line":517,"column":28},"end":{"line":517,"column":55}}},"20":{"name":"(anonymous_20)","line":534,"loc":{"start":{"line":534,"column":8},"end":{"line":534,"column":29}}},"21":{"name":"(anonymous_21)","line":569,"loc":{"start":{"line":569,"column":44},"end":{"line":569,"column":56}}},"22":{"name":"(anonymous_22)","line":575,"loc":{"start":{"line":575,"column":8},"end":{"line":575,"column":24}}},"23":{"name":"(anonymous_23)","line":581,"loc":{"start":{"line":581,"column":8},"end":{"line":581,"column":27}}},"24":{"name":"(anonymous_24)","line":584,"loc":{"start":{"line":584,"column":8},"end":{"line":584,"column":22}}},"25":{"name":"(anonymous_25)","line":632,"loc":{"start":{"line":632,"column":4},"end":{"line":632,"column":24}}},"26":{"name":"(anonymous_26)","line":633,"loc":{"start":{"line":633,"column":48},"end":{"line":633,"column":61}}},"27":{"name":"(anonymous_27)","line":639,"loc":{"start":{"line":639,"column":22},"end":{"line":639,"column":36}}},"28":{"name":"(anonymous_28)","line":648,"loc":{"start":{"line":648,"column":26},"end":{"line":648,"column":45}}},"29":{"name":"(anonymous_29)","line":675,"loc":{"start":{"line":675,"column":49},"end":{"line":675,"column":74}}},"30":{"name":"(anonymous_30)","line":710,"loc":{"start":{"line":710,"column":35},"end":{"line":710,"column":47}}},"31":{"name":"(anonymous_31)","line":715,"loc":{"start":{"line":715,"column":8},"end":{"line":715,"column":24}}},"32":{"name":"(anonymous_32)","line":723,"loc":{"start":{"line":723,"column":8},"end":{"line":723,"column":27}}},"33":{"name":"(anonymous_33)","line":726,"loc":{"start":{"line":726,"column":8},"end":{"line":726,"column":22}}},"34":{"name":"(anonymous_34)","line":750,"loc":{"start":{"line":750,"column":37},"end":{"line":750,"column":49}}},"35":{"name":"(anonymous_35)","line":756,"loc":{"start":{"line":756,"column":8},"end":{"line":756,"column":24}}},"36":{"name":"(anonymous_36)","line":764,"loc":{"start":{"line":764,"column":8},"end":{"line":764,"column":27}}},"37":{"name":"(anonymous_37)","line":767,"loc":{"start":{"line":767,"column":8},"end":{"line":767,"column":22}}},"38":{"name":"(anonymous_38)","line":782,"loc":{"start":{"line":782,"column":43},"end":{"line":782,"column":60}}},"39":{"name":"(anonymous_39)","line":864,"loc":{"start":{"line":864,"column":37},"end":{"line":864,"column":58}}},"40":{"name":"(anonymous_40)","line":872,"loc":{"start":{"line":872,"column":39},"end":{"line":872,"column":58}}},"41":{"name":"(anonymous_41)","line":874,"loc":{"start":{"line":874,"column":22},"end":{"line":874,"column":38}}},"42":{"name":"(anonymous_42)","line":878,"loc":{"start":{"line":878,"column":53},"end":{"line":878,"column":65}}},"43":{"name":"(anonymous_43)","line":917,"loc":{"start":{"line":917,"column":68},"end":{"line":917,"column":86}}},"44":{"name":"(anonymous_44)","line":920,"loc":{"start":{"line":920,"column":60},"end":{"line":920,"column":72}}},"45":{"name":"(anonymous_45)","line":943,"loc":{"start":{"line":943,"column":30},"end":{"line":943,"column":48}}},"46":{"name":"(anonymous_46)","line":947,"loc":{"start":{"line":947,"column":8},"end":{"line":947,"column":25}}},"47":{"name":"(anonymous_47)","line":956,"loc":{"start":{"line":956,"column":23},"end":{"line":956,"column":39}}},"48":{"name":"(anonymous_48)","line":973,"loc":{"start":{"line":973,"column":34},"end":{"line":973,"column":46}}},"49":{"name":"(anonymous_49)","line":989,"loc":{"start":{"line":989,"column":43},"end":{"line":989,"column":69}}},"50":{"name":"(anonymous_50)","line":995,"loc":{"start":{"line":995,"column":36},"end":{"line":995,"column":63}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1019,"column":3}},"2":{"start":{"line":21,"column":3},"end":{"line":128,"column":6}},"3":{"start":{"line":115,"column":8},"end":{"line":126,"column":9}},"4":{"start":{"line":116,"column":12},"end":{"line":125,"column":13}},"5":{"start":{"line":117,"column":16},"end":{"line":117,"column":46}},"6":{"start":{"line":119,"column":16},"end":{"line":123,"column":19}},"7":{"start":{"line":124,"column":16},"end":{"line":124,"column":26}},"8":{"start":{"line":127,"column":8},"end":{"line":127,"column":30}},"9":{"start":{"line":138,"column":0},"end":{"line":187,"column":2}},"10":{"start":{"line":139,"column":4},"end":{"line":139,"column":24}},"11":{"start":{"line":140,"column":4},"end":{"line":186,"column":6}},"12":{"start":{"line":142,"column":12},"end":{"line":142,"column":53}},"13":{"start":{"line":147,"column":12},"end":{"line":147,"column":111}},"14":{"start":{"line":149,"column":12},"end":{"line":184,"column":13}},"15":{"start":{"line":151,"column":16},"end":{"line":151,"column":80}},"16":{"start":{"line":153,"column":16},"end":{"line":175,"column":18}},"17":{"start":{"line":156,"column":24},"end":{"line":161,"column":55}},"18":{"start":{"line":162,"column":24},"end":{"line":173,"column":25}},"19":{"start":{"line":163,"column":28},"end":{"line":163,"column":69}},"20":{"start":{"line":164,"column":28},"end":{"line":164,"column":203}},"21":{"start":{"line":165,"column":28},"end":{"line":172,"column":30}},"22":{"start":{"line":167,"column":36},"end":{"line":167,"column":81}},"23":{"start":{"line":170,"column":36},"end":{"line":170,"column":81}},"24":{"start":{"line":176,"column":16},"end":{"line":178,"column":19}},"25":{"start":{"line":177,"column":20},"end":{"line":177,"column":59}},"26":{"start":{"line":179,"column":16},"end":{"line":181,"column":19}},"27":{"start":{"line":180,"column":20},"end":{"line":180,"column":59}},"28":{"start":{"line":443,"column":0},"end":{"line":467,"column":2}},"29":{"start":{"line":446,"column":8},"end":{"line":462,"column":10}},"30":{"start":{"line":447,"column":12},"end":{"line":448,"column":24}},"31":{"start":{"line":452,"column":12},"end":{"line":459,"column":14}},"32":{"start":{"line":454,"column":20},"end":{"line":454,"column":45}},"33":{"start":{"line":457,"column":20},"end":{"line":457,"column":34}},"34":{"start":{"line":461,"column":12},"end":{"line":461,"column":28}},"35":{"start":{"line":463,"column":8},"end":{"line":465,"column":10}},"36":{"start":{"line":464,"column":12},"end":{"line":464,"column":52}},"37":{"start":{"line":475,"column":0},"end":{"line":482,"column":2}},"38":{"start":{"line":476,"column":4},"end":{"line":476,"column":24}},"39":{"start":{"line":478,"column":4},"end":{"line":478,"column":76}},"40":{"start":{"line":479,"column":4},"end":{"line":479,"column":92}},"41":{"start":{"line":480,"column":4},"end":{"line":480,"column":92}},"42":{"start":{"line":495,"column":0},"end":{"line":502,"column":2}},"43":{"start":{"line":496,"column":4},"end":{"line":496,"column":24}},"44":{"start":{"line":498,"column":4},"end":{"line":498,"column":64}},"45":{"start":{"line":499,"column":4},"end":{"line":499,"column":77}},"46":{"start":{"line":501,"column":4},"end":{"line":501,"column":20}},"47":{"start":{"line":513,"column":0},"end":{"line":551,"column":2}},"48":{"start":{"line":514,"column":4},"end":{"line":515,"column":61}},"49":{"start":{"line":517,"column":4},"end":{"line":520,"column":7}},"50":{"start":{"line":518,"column":8},"end":{"line":518,"column":33}},"51":{"start":{"line":519,"column":8},"end":{"line":519,"column":31}},"52":{"start":{"line":523,"column":4},"end":{"line":530,"column":6}},"53":{"start":{"line":532,"column":4},"end":{"line":537,"column":6}},"54":{"start":{"line":535,"column":12},"end":{"line":535,"column":38}},"55":{"start":{"line":539,"column":4},"end":{"line":547,"column":82}},"56":{"start":{"line":549,"column":4},"end":{"line":549,"column":38}},"57":{"start":{"line":550,"column":4},"end":{"line":550,"column":19}},"58":{"start":{"line":569,"column":0},"end":{"line":589,"column":2}},"59":{"start":{"line":570,"column":4},"end":{"line":572,"column":28}},"60":{"start":{"line":574,"column":4},"end":{"line":578,"column":6}},"61":{"start":{"line":576,"column":12},"end":{"line":576,"column":60}},"62":{"start":{"line":579,"column":4},"end":{"line":587,"column":6}},"63":{"start":{"line":582,"column":12},"end":{"line":582,"column":39}},"64":{"start":{"line":585,"column":12},"end":{"line":585,"column":44}},"65":{"start":{"line":588,"column":4},"end":{"line":588,"column":21}},"66":{"start":{"line":630,"column":0},"end":{"line":687,"column":2}},"67":{"start":{"line":633,"column":8},"end":{"line":685,"column":10}},"68":{"start":{"line":634,"column":12},"end":{"line":637,"column":37}},"69":{"start":{"line":639,"column":12},"end":{"line":647,"column":14}},"70":{"start":{"line":640,"column":16},"end":{"line":644,"column":18}},"71":{"start":{"line":645,"column":16},"end":{"line":645,"column":53}},"72":{"start":{"line":646,"column":16},"end":{"line":646,"column":48}},"73":{"start":{"line":648,"column":12},"end":{"line":666,"column":14}},"74":{"start":{"line":649,"column":16},"end":{"line":649,"column":27}},"75":{"start":{"line":650,"column":16},"end":{"line":650,"column":38}},"76":{"start":{"line":651,"column":16},"end":{"line":651,"column":42}},"77":{"start":{"line":652,"column":16},"end":{"line":655,"column":17}},"78":{"start":{"line":654,"column":20},"end":{"line":654,"column":49}},"79":{"start":{"line":656,"column":16},"end":{"line":656,"column":34}},"80":{"start":{"line":659,"column":16},"end":{"line":664,"column":17}},"81":{"start":{"line":660,"column":20},"end":{"line":660,"column":50}},"82":{"start":{"line":663,"column":20},"end":{"line":663,"column":52}},"83":{"start":{"line":665,"column":16},"end":{"line":665,"column":43}},"84":{"start":{"line":667,"column":12},"end":{"line":683,"column":13}},"85":{"start":{"line":669,"column":16},"end":{"line":672,"column":18}},"86":{"start":{"line":675,"column":16},"end":{"line":682,"column":19}},"87":{"start":{"line":676,"column":20},"end":{"line":681,"column":21}},"88":{"start":{"line":677,"column":24},"end":{"line":677,"column":37}},"89":{"start":{"line":680,"column":24},"end":{"line":680,"column":46}},"90":{"start":{"line":684,"column":12},"end":{"line":684,"column":29}},"91":{"start":{"line":710,"column":0},"end":{"line":731,"column":2}},"92":{"start":{"line":711,"column":4},"end":{"line":713,"column":28}},"93":{"start":{"line":714,"column":4},"end":{"line":720,"column":6}},"94":{"start":{"line":716,"column":12},"end":{"line":718,"column":13}},"95":{"start":{"line":717,"column":16},"end":{"line":717,"column":58}},"96":{"start":{"line":721,"column":4},"end":{"line":729,"column":6}},"97":{"start":{"line":724,"column":12},"end":{"line":724,"column":39}},"98":{"start":{"line":727,"column":12},"end":{"line":727,"column":44}},"99":{"start":{"line":730,"column":4},"end":{"line":730,"column":21}},"100":{"start":{"line":750,"column":0},"end":{"line":772,"column":2}},"101":{"start":{"line":751,"column":4},"end":{"line":753,"column":28}},"102":{"start":{"line":755,"column":4},"end":{"line":761,"column":6}},"103":{"start":{"line":758,"column":12},"end":{"line":758,"column":81}},"104":{"start":{"line":762,"column":4},"end":{"line":770,"column":6}},"105":{"start":{"line":765,"column":12},"end":{"line":765,"column":39}},"106":{"start":{"line":768,"column":12},"end":{"line":768,"column":44}},"107":{"start":{"line":771,"column":4},"end":{"line":771,"column":21}},"108":{"start":{"line":782,"column":0},"end":{"line":792,"column":2}},"109":{"start":{"line":783,"column":4},"end":{"line":783,"column":24}},"110":{"start":{"line":786,"column":4},"end":{"line":790,"column":5}},"111":{"start":{"line":787,"column":8},"end":{"line":789,"column":11}},"112":{"start":{"line":791,"column":4},"end":{"line":791,"column":33}},"113":{"start":{"line":864,"column":0},"end":{"line":960,"column":2}},"114":{"start":{"line":865,"column":4},"end":{"line":866,"column":50}},"115":{"start":{"line":869,"column":4},"end":{"line":869,"column":58}},"116":{"start":{"line":870,"column":4},"end":{"line":870,"column":60}},"117":{"start":{"line":872,"column":4},"end":{"line":872,"column":74}},"118":{"start":{"line":872,"column":60},"end":{"line":872,"column":70}},"119":{"start":{"line":874,"column":4},"end":{"line":954,"column":6}},"120":{"start":{"line":875,"column":8},"end":{"line":876,"column":24}},"121":{"start":{"line":878,"column":8},"end":{"line":953,"column":11}},"122":{"start":{"line":879,"column":12},"end":{"line":888,"column":14}},"123":{"start":{"line":889,"column":12},"end":{"line":889,"column":38}},"124":{"start":{"line":891,"column":12},"end":{"line":893,"column":26}},"125":{"start":{"line":895,"column":16},"end":{"line":895,"column":46}},"126":{"start":{"line":896,"column":16},"end":{"line":896,"column":52}},"127":{"start":{"line":898,"column":12},"end":{"line":898,"column":44}},"128":{"start":{"line":899,"column":12},"end":{"line":907,"column":13}},"129":{"start":{"line":900,"column":16},"end":{"line":906,"column":17}},"130":{"start":{"line":901,"column":20},"end":{"line":905,"column":21}},"131":{"start":{"line":902,"column":24},"end":{"line":902,"column":60}},"132":{"start":{"line":909,"column":12},"end":{"line":912,"column":13}},"133":{"start":{"line":910,"column":16},"end":{"line":910,"column":63}},"134":{"start":{"line":911,"column":16},"end":{"line":911,"column":69}},"135":{"start":{"line":916,"column":12},"end":{"line":945,"column":19}},"136":{"start":{"line":918,"column":20},"end":{"line":918,"column":33}},"137":{"start":{"line":924,"column":20},"end":{"line":924,"column":46}},"138":{"start":{"line":925,"column":20},"end":{"line":933,"column":21}},"139":{"start":{"line":926,"column":24},"end":{"line":932,"column":25}},"140":{"start":{"line":927,"column":28},"end":{"line":931,"column":29}},"141":{"start":{"line":928,"column":32},"end":{"line":928,"column":68}},"142":{"start":{"line":935,"column":20},"end":{"line":939,"column":21}},"143":{"start":{"line":936,"column":24},"end":{"line":938,"column":25}},"144":{"start":{"line":937,"column":28},"end":{"line":937,"column":35}},"145":{"start":{"line":944,"column":20},"end":{"line":944,"column":33}},"146":{"start":{"line":948,"column":12},"end":{"line":951,"column":14}},"147":{"start":{"line":952,"column":12},"end":{"line":952,"column":49}},"148":{"start":{"line":956,"column":4},"end":{"line":958,"column":6}},"149":{"start":{"line":957,"column":8},"end":{"line":957,"column":40}},"150":{"start":{"line":959,"column":4},"end":{"line":959,"column":22}},"151":{"start":{"line":973,"column":0},"end":{"line":975,"column":2}},"152":{"start":{"line":974,"column":4},"end":{"line":974,"column":51}},"153":{"start":{"line":989,"column":0},"end":{"line":1001,"column":2}},"154":{"start":{"line":990,"column":4},"end":{"line":991,"column":22}},"155":{"start":{"line":993,"column":4},"end":{"line":993,"column":56}},"156":{"start":{"line":994,"column":4},"end":{"line":999,"column":5}},"157":{"start":{"line":995,"column":8},"end":{"line":998,"column":11}},"158":{"start":{"line":996,"column":12},"end":{"line":996,"column":118}},"159":{"start":{"line":997,"column":12},"end":{"line":997,"column":44}},"160":{"start":{"line":1000,"column":4},"end":{"line":1000,"column":23}},"161":{"start":{"line":1004,"column":0},"end":{"line":1004,"column":79}}},"branchMap":{"1":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"2":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":15},"end":{"line":127,"column":23}},{"start":{"line":127,"column":27},"end":{"line":127,"column":29}}]},"3":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":13},"end":{"line":147,"column":53}},{"start":{"line":147,"column":59},"end":{"line":147,"column":109}}]},"4":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":12},"end":{"line":149,"column":12}},{"start":{"line":149,"column":12},"end":{"line":149,"column":12}}]},"5":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":16},"end":{"line":151,"column":45}},{"start":{"line":151,"column":49},"end":{"line":151,"column":79}}]},"6":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":37},"end":{"line":157,"column":51}},{"start":{"line":157,"column":55},"end":{"line":157,"column":70}}]},"7":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":38},"end":{"line":160,"column":50}},{"start":{"line":160,"column":54},"end":{"line":160,"column":66}}]},"8":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":24},"end":{"line":162,"column":24}},{"start":{"line":162,"column":24},"end":{"line":162,"column":24}}]},"9":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":29},"end":{"line":162,"column":46}},{"start":{"line":162,"column":51},"end":{"line":162,"column":57}}]},"10":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":72},"end":{"line":164,"column":85}},{"start":{"line":164,"column":90},"end":{"line":164,"column":102}},{"start":{"line":164,"column":106},"end":{"line":164,"column":127}},{"start":{"line":164,"column":132},"end":{"line":164,"column":180}}]},"11":{"line":452,"type":"binary-expr","locations":[{"start":{"line":452,"column":13},"end":{"line":452,"column":50}},{"start":{"line":452,"column":55},"end":{"line":452,"column":63}},{"start":{"line":452,"column":67},"end":{"line":459,"column":13}}]},"12":{"line":478,"type":"binary-expr","locations":[{"start":{"line":478,"column":4},"end":{"line":478,"column":33}},{"start":{"line":478,"column":37},"end":{"line":478,"column":75}}]},"13":{"line":479,"type":"binary-expr","locations":[{"start":{"line":479,"column":4},"end":{"line":479,"column":41}},{"start":{"line":479,"column":45},"end":{"line":479,"column":91}}]},"14":{"line":480,"type":"binary-expr","locations":[{"start":{"line":480,"column":4},"end":{"line":480,"column":41}},{"start":{"line":480,"column":45},"end":{"line":480,"column":91}}]},"15":{"line":498,"type":"binary-expr","locations":[{"start":{"line":498,"column":4},"end":{"line":498,"column":29}},{"start":{"line":498,"column":34},"end":{"line":498,"column":62}}]},"16":{"line":499,"type":"binary-expr","locations":[{"start":{"line":499,"column":4},"end":{"line":499,"column":31}},{"start":{"line":499,"column":36},"end":{"line":499,"column":75}}]},"17":{"line":532,"type":"binary-expr","locations":[{"start":{"line":532,"column":5},"end":{"line":532,"column":30}},{"start":{"line":532,"column":35},"end":{"line":537,"column":5}}]},"18":{"line":539,"type":"binary-expr","locations":[{"start":{"line":539,"column":4},"end":{"line":539,"column":28}},{"start":{"line":539,"column":33},"end":{"line":547,"column":80}}]},"19":{"line":635,"type":"cond-expr","locations":[{"start":{"line":635,"column":54},"end":{"line":635,"column":64}},{"start":{"line":635,"column":67},"end":{"line":635,"column":71}}]},"20":{"line":652,"type":"if","locations":[{"start":{"line":652,"column":16},"end":{"line":652,"column":16}},{"start":{"line":652,"column":16},"end":{"line":652,"column":16}}]},"21":{"line":659,"type":"if","locations":[{"start":{"line":659,"column":16},"end":{"line":659,"column":16}},{"start":{"line":659,"column":16},"end":{"line":659,"column":16}}]},"22":{"line":659,"type":"binary-expr","locations":[{"start":{"line":659,"column":21},"end":{"line":659,"column":43}},{"start":{"line":659,"column":48},"end":{"line":659,"column":62}}]},"23":{"line":667,"type":"if","locations":[{"start":{"line":667,"column":12},"end":{"line":667,"column":12}},{"start":{"line":667,"column":12},"end":{"line":667,"column":12}}]},"24":{"line":676,"type":"if","locations":[{"start":{"line":676,"column":20},"end":{"line":676,"column":20}},{"start":{"line":676,"column":20},"end":{"line":676,"column":20}}]},"25":{"line":716,"type":"if","locations":[{"start":{"line":716,"column":12},"end":{"line":716,"column":12}},{"start":{"line":716,"column":12},"end":{"line":716,"column":12}}]},"26":{"line":758,"type":"binary-expr","locations":[{"start":{"line":758,"column":12},"end":{"line":758,"column":31}},{"start":{"line":758,"column":35},"end":{"line":758,"column":80}}]},"27":{"line":786,"type":"if","locations":[{"start":{"line":786,"column":4},"end":{"line":786,"column":4}},{"start":{"line":786,"column":4},"end":{"line":786,"column":4}}]},"28":{"line":869,"type":"binary-expr","locations":[{"start":{"line":869,"column":4},"end":{"line":869,"column":8}},{"start":{"line":869,"column":13},"end":{"line":869,"column":31}},{"start":{"line":869,"column":36},"end":{"line":869,"column":57}}]},"29":{"line":870,"type":"binary-expr","locations":[{"start":{"line":870,"column":4},"end":{"line":870,"column":8}},{"start":{"line":870,"column":13},"end":{"line":870,"column":31}},{"start":{"line":870,"column":36},"end":{"line":870,"column":59}}]},"30":{"line":898,"type":"binary-expr","locations":[{"start":{"line":898,"column":23},"end":{"line":898,"column":31}},{"start":{"line":898,"column":35},"end":{"line":898,"column":43}}]},"31":{"line":899,"type":"if","locations":[{"start":{"line":899,"column":12},"end":{"line":899,"column":12}},{"start":{"line":899,"column":12},"end":{"line":899,"column":12}}]},"32":{"line":909,"type":"if","locations":[{"start":{"line":909,"column":12},"end":{"line":909,"column":12}},{"start":{"line":909,"column":12},"end":{"line":909,"column":12}}]},"33":{"line":909,"type":"binary-expr","locations":[{"start":{"line":909,"column":16},"end":{"line":909,"column":34}},{"start":{"line":909,"column":38},"end":{"line":909,"column":57}}]},"34":{"line":916,"type":"cond-expr","locations":[{"start":{"line":917,"column":16},"end":{"line":919,"column":18}},{"start":{"line":920,"column":16},"end":{"line":945,"column":18}}]},"35":{"line":925,"type":"if","locations":[{"start":{"line":925,"column":20},"end":{"line":925,"column":20}},{"start":{"line":925,"column":20},"end":{"line":925,"column":20}}]},"36":{"line":935,"type":"if","locations":[{"start":{"line":935,"column":20},"end":{"line":935,"column":20}},{"start":{"line":935,"column":20},"end":{"line":935,"column":20}}]},"37":{"line":949,"type":"binary-expr","locations":[{"start":{"line":949,"column":27},"end":{"line":949,"column":33}},{"start":{"line":949,"column":38},"end":{"line":949,"column":52}},{"start":{"line":949,"column":56},"end":{"line":949,"column":62}}]},"38":{"line":994,"type":"if","locations":[{"start":{"line":994,"column":4},"end":{"line":994,"column":4}},{"start":{"line":994,"column":4},"end":{"line":994,"column":4}}]}},"code":["(function () { YUI.add('gallery-itsamodellistsyncpromise', function (Y, NAME) {","","'use strict';","","/*jshint maxlen:205 */","","/**"," *"," * This module extends Y.ModelList by introducing Promised sync-methods. It also transforms Y.ModelList's sync-events into true events"," * with a defaultFunc which can be prevented. This means the 'on'-events will be fired before syncing and the 'after'-events after syncing."," *"," * @module gallery-itsamodellistsyncpromise"," * @class Y.ModelList"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","   var YModelList = Y.ModelList,","       YArray = Y.Array,","       YObject = Y.Object,","       PUBLISHED = '_pub_',","       READ = 'read',","       APPEND = 'append',","       DELETE = 'delete',","       READAPPEND = READ+APPEND,","       MODELSYNC = 'modelsync',","       GALLERYITSAMODELSYNCPROMISE = 'gallery-itsa'+MODELSYNC+'promise',","       AVAILABLESYNCMESSAGES = {","           load: true,","           save: true,","           submit: true,","           destroy: true","       },","       DEFFN = '_defFn_',","   /**","     * Fired when an error occurs, such as when an attribute (or property) doesn't validate or when","     * the sync layer submit-function returns an error.","     * @event error","     * @param e {EventFacade} Event Facade including:","     * @param e.error {any} Error message.","     * @param e.src {String} Source of the error. May be one of the following (or any","     *                     custom error source defined by a Model subclass):","     *","     * `submit`: An error submitting the model from within a sync layer.","     *","     * `attributevalidation`: An error validating an attribute (or property). The attribute (or objectproperty)","     *                        that failed validation will be provided as the `attribute` property on the event facade.","     *","     * @param e.attribute {String} The attribute/property that failed validation.","     * @param e.validationerror {String} The errormessage in case of attribute-validation error.","    **/","    ERROR = 'error',","","    /**","     * Fired when all changed models of the modellist are saved through the Model-sync layer.","     * @event save","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SAVE = 'save',","","   /**","     * Fired when models are submitted through the Model-sync layer.","     * @event submit","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SUBMIT = 'submit',","","   /**","     * Fired when models are read from the ModelList-sync layer.","     * @event load","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOAD = 'load',","","   /**","     * Fired when models are appended to the ModelList by the ModelList-sync layer.","     * @event loadappend","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOADAPPEND = LOAD+APPEND,","","   /**","     * Fired when models are destroyed from the ModelList-sync layer.","     * @event destroymodels","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    DESTROY = 'destroy',","    DESTROYMODELS = DESTROY+'models',","    PROMISE = 'Promise',","","    PARSED = function (response) {","        if (typeof response === 'string') {","            try {","                return Y.JSON.parse(response);","            } catch (ex) {","                this.fire(ERROR, {","                    error   : ex,","                    response: response,","                    src     : 'parse'","                });","                return {};","            }","        }","        return response || {};","    };","","/**"," * Makes sync-messages to target the specified messageViewer. You can only target to 1 MessageViewer at the same time.<br>"," * See gallery-itsamessageviewer for more info."," *"," * @method addMessageTarget"," * @param itsamessageviewer {Y.ITSAMessageViewer|Y.ITSAPanel}"," * @since 0.4","*/","YModelList.prototype.addMessageTarget = function(itsamessageviewer) {","    var instance = this;","    Y.usePromise('gallery-itsamessagecontroller', 'gallery-itsamessageviewer', 'gallery-itsapanel').then(","        function() {","            return Y.ITSAMessageController.isReady();","        }","    ).then(","        function() {","/*jshint expr:true */","            (itsamessageviewer instanceof Y.ITSAPanel) && (itsamessageviewer=itsamessageviewer._itsastatusbar);","/*jshint expr:false */","            if (itsamessageviewer instanceof Y.ITSAMessageViewer) {","/*jshint expr:true */","                instance._itsamessageListener && instance.removeMessageTarget();","/*jshint expr:false */","                instance._itsamessageListener = instance.on(","                    [LOAD, SUBMIT, SAVE, DESTROY],","                    function(e) {","                        var options = e.options,","                            remove = options.remove || options[DELETE],","                            type = e.type,","                            typesplit = type.split(':'),","                            subtype = typesplit[1] || typesplit[0],","                            statushandle, syncMessages;","                        if ((subtype!==DESTROY) || remove) {","                            syncMessages = instance._defSyncMessages;","                            statushandle = itsamessageviewer.showStatus(e.syncmessage || (syncMessages && syncMessages[subtype]) || Y.Intl.get(GALLERYITSAMODELSYNCPROMISE)[subtype], {source: MODELSYNC});","                            e.promise.then(","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                },","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                }","                            );","                        }","                    }","                );","                instance._itsamessagedestroylistener1 = instance.onceAfter(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","                instance._itsamessagedestroylistener2 = itsamessageviewer.once(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","            }","            else {","            }","        }","    );","};","","/**","  * Destroys this model instance and removes it from its containing lists, if any. The 'callback', if one is provided,","  * will be called after the model is destroyed.<br /><br />","  * If `options.remove` is `true`, then this method delegates to the `sync()` method to delete the model from the persistence layer, which is an","  * asynchronous action. In this case, the 'callback' (if provided) will be called after the sync layer indicates success or failure of the delete operation.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>destroyPromise()</b>.<br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method destroymodels","  * @param {Object} [options] Sync options. It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called after the model has been destroyed (and deleted via the sync layer if `options.remove` is `true`).","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. Otherwise 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable","*/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * If `options.remove` is `true`, then this method delegates to the `sync()`"," * method to delete the model from the persistence layer, which is an"," * asynchronous action."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroymodelsPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * Deprecated, use destroyModelsPromise instead (as long as available both methods ect the same)."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroyPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message)."," * @deprecated","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method load","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method loadappend","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadappendPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**"," * Saves this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method save"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during saving destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Saves this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method savePromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious saving. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Submits this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submit"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Submits this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submitPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.syncmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","YArray.each(","    [LOAD, LOADAPPEND, SAVE, SUBMIT, DESTROYMODELS],","    function(Fn) {","        YModelList.prototype[Fn] = function(options, callback) {","            var instance = this,","                promise;","","            // by overwriting the default 'save'-method we manage to fire 'destroystart'-event.","        /*jshint expr:true */","            (promise=instance[Fn+PROMISE](options)) && callback && promise.then(","                function(response) {","                    callback(null, response);","                },","                function(err) {","                    callback(err);","                }","            );","        /*jshint expr:false */","            return instance;","        };","        YModelList.prototype[Fn+PROMISE] = function (options) {","            return this._createPromise(Fn, options);","        };","    }",");","","/**"," * Removes the messageViewer-target that was set up by addMessageTarget()."," *"," * @method removeMessageTarget"," * @since 0.1","*/","YModelList.prototype.removeMessageTarget = function() {","    var instance = this;","/*jshint expr:true */","    instance._itsamessageListener && instance._itsamessageListener.detach();","    instance._itsamessagedestroylistener1 && instance._itsamessagedestroylistener1.detach();","    instance._itsamessagedestroylistener2 && instance._itsamessagedestroylistener2.detach();","/*jshint expr:false */","};","","/**"," * Defines the syncmessage to be used when calling the synclayer. When not defined (and not declared during calling the syncmethod by 'options.syncmessage'),"," * a default i18n-message will be used."," * See gallery-itsamessageviewer for more info about syncmessages."," *"," * @method setSyncMessage"," * @param type {String} the syncaction = 'load'|'save'|destroy'|'submit'"," * @param message {String} the syncmessage that should be viewed by a Y.ITSAMessageViewer"," * @chainable"," * @since 0.4","*/","YModelList.prototype.setSyncMessage = function(type, message) {","    var instance = this;","/*jshint expr:true */","    instance._defSyncMessages || (instance._defSyncMessages={});","    AVAILABLESYNCMESSAGES[type] && (instance._defSyncMessages[type]=message);","/*jshint expr:false */","    return instance;","};","","/**"," * Private function that creates the promises for all promise-events"," *"," * @method _createPromise"," * @param type {String} Method to create a promise for"," * @param options {Object} options to be send with the event"," * @private"," * @since 0.3","*/","YModelList.prototype._createPromise = function(type, options) {","    var instance = this,","        promise, promiseResolve, promiseReject, extraOptions;","","    promise = new Y.Promise(function (resolve, reject) {","        promiseResolve = resolve;","        promiseReject = reject;","    });","    // we pass the promise, together with the resolve and reject handlers as an option to the event.","    // this way we can fullfill the promise in the defaultFn or prevDefaultFn.","    extraOptions = {","        promise: promise,","        promiseResolve: promiseResolve,","        promiseReject: promiseReject,","        response: '', // making available at the after listener","        parsed: {}, // making available at the after listener","        options: Y.merge(options) // making passing only optins to other events possible","    };","/*jshint expr:true */","    (typeof options==='object') && YObject.each(","        options,","        function(value, key) {","            extraOptions[key] = value;","        }","    );","    // lazy publish the event","    instance[PUBLISHED+type] || (instance[PUBLISHED+type]=instance._publishAsync(type,","                                                                                {","                                                                                  defaultTargetOnly: true,","                                                                                  emitFacade: true,","                                                                                  broadcast: 1,","                                                                                  defaultFn: instance[DEFFN+type],","                                                                                  preventedFn: instance._prevDefFn","                                                                                }","                                                                               ));","/*jshint expr:false */","    instance.fire(type, extraOptions);","    return promise;","};","","/**"," * Destroys all models within this modellist."," * <b>Caution:</b> The current version uses the Model's synclayer, NOT ModelList's synclayer."," *"," * This method delegates to the Model's`sync()` method to perform the actual destroy"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful destroy operation will fire an `error` event with the `src` value \"destroy\"."," *"," * @method _defFn_destroymodels"," * @private"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+DESTROYMODELS] = function(e) {","    var instance = this,","        destroylist = [],","        options = e.options;","","    instance.each(","        function(model) {","            destroylist.push(model.destroyPromise(options));","        }","    );","    Y.batch.apply(Y, destroylist).then(","//            Y.Promise.every(destroylist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be retained: new will be added.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'readappend' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"loadappend\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_loadappend"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be replaced. Use loadappendPromise to append the items.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'read' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_load"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YArray.each(","    [LOAD, LOADAPPEND],","    function(eventType) {","        YModelList.prototype[DEFFN+eventType] = function (e) {","            var instance = this,","                readsync = (eventType===LOADAPPEND) ? READAPPEND : READ,","                options = e.options,","                errFunc, successFunc;","","            errFunc = function(err) {","                var facade = {","                    options: options,","                    error: err,","                    src: eventType","                };","                instance._lazyFireErrorEvent(facade);","                e.promiseReject(new Error(err));","            };","            successFunc = function(response) {","                var parsed;","                e.response = response;","                parsed = PARSED(response);","                if (parsed.responseText) {","                    // XMLHttpRequest","                    parsed = parsed.responseText;","                }","                e.parsed = parsed;","                //options.append is for compatiblility with previous versions","                // where you could call: loadPromise({append: true});","                if ((eventType===LOADAPPEND) || options.append) {","                    instance.add(parsed, options);","                }","                else {","                    instance.reset(parsed, options);","                }","                e.promiseResolve(response);","            };","            if (instance.syncPromise) {","                // use the syncPromise-layer","                instance._syncTimeoutPromise(readsync, options).then(","                    successFunc,","                    errFunc","                );","            }","            else {","                instance.sync(readsync, options, function (err, response) {","                    if (err) {","                        errFunc(err);","                    }","                    else {","                        successFunc(response);","                    }","                });","            }","            return e.promise;","        };","    }",");","","/**"," * Saves all modified models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all modified Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual save"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," *"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," *"," * @method _defFn_save"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SAVE] = function(e) {","    var instance = this,","        savelist = [],","        options = e.options;","    instance.each(","        function(model) {","            if (model.isModified()) {","                savelist.push(model.savePromise(options));","            }","        }","    );","    Y.batch.apply(Y, savelist).then(","//            Y.Promise.every(savelist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Submits all models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual submit"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful submit operation will fire an `error` event with the `src` value \"submit\"."," *"," * @method _defFn_submit"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SUBMIT] = function(e) {","    var instance = this,","        submitlist = [],","        options = e.options;","","    instance.each(","        function(model) {","/*jshint expr:true */","            model.submitPromise && submitlist.push(model.submitPromise(options));","/*jshint expr:false */","        }","    );","    Y.batch.apply(Y, submitlist).then(","//            Y.Promise.every(submitlist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Fires the ERROR-event and -if not published yet- publish it broadcasted to Y."," * Because the error-event is broadcasted to Y, it can be catched by gallery-itsaerrorreporter."," *"," * @method _lazyFireErrorEvent"," * @param {Object} [facade] eventfacade."," * @private","**/","YModelList.prototype._lazyFireErrorEvent = function(facade) {","    var instance = this;","","    // lazy publish","    if (!instance._errorEvent) {","        instance._errorEvent = instance.publish(ERROR, {","            broadcast: 1","        });","    }","    instance.fire(ERROR, facade);","};","","/**","   * Hack with the help of Luke Smith: https://gist.github.com/lsmith/6664382/d688740bb91f9ecfc3c89456a82f30d35c5095cb","   * Variant of publish(), but works with asynchronious defaultFn and preventedFn.","   *","   * Creates a new custom event of the specified type.  If a custom event","   * by that name already exists, it will not be re-created.  In either","   * case the custom event is returned.","   *","   * @method _publishAsync","   *","   * @param type {String} the type, or name of the event","   * @param opts {object} optional config params.  Valid properties are:","   *","   *  <ul>","   *    <li>","   *   'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)","   *    </li>","   *    <li>","   *   'bubbles': whether or not this event bubbles (true)","   *              Events can only bubble if emitFacade is true.","   *    </li>","   *    <li>","   *   'context': the default execution context for the listeners (this)","   *    </li>","   *    <li>","   *   'defaultFn': the default function to execute when this event fires if preventDefault was not called","   *    </li>","   *    <li>","   *   'emitFacade': whether or not this event emits a facade (false)","   *    </li>","   *    <li>","   *   'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'","   *    </li>","   *    <li>","   *   'fireOnce': if an event is configured to fire once, new subscribers after","   *   the fire will be notified immediately.","   *    </li>","   *    <li>","   *   'async': fireOnce event listeners will fire synchronously if the event has already","   *    fired unless async is true.","   *    </li>","   *    <li>","   *   'preventable': whether or not preventDefault() has an effect (true)","   *    </li>","   *    <li>","   *   'preventedFn': a function that is executed when preventDefault is called","   *    </li>","   *    <li>","   *   'queuable': whether or not this event can be queued during bubbling (false)","   *    </li>","   *    <li>","   *   'silent': if silent is true, debug messages are not provided for this event.","   *    </li>","   *    <li>","   *   'stoppedFn': a function that is executed when stopPropagation is called","   *    </li>","   *","   *    <li>","   *   'monitored': specifies whether or not this event should send notifications about","   *   when the event has been attached, detached, or published.","   *    </li>","   *    <li>","   *   'type': the event type (valid option if not provided as the first parameter to publish)","   *    </li>","   *  </ul>","   *","   *  @private","   *  @return {CustomEvent} the custom event","   *","  **/","YModelList.prototype._publishAsync = function(type, opts) {","    var instance = this,","        asyncEvent = instance.publish(type, opts);","","/*jshint expr:true */","    opts && (opts.broadcast===1) && instance.addTarget(Y);","    opts && (opts.broadcast===2) && instance.addTarget(YUI);","/*jshint expr:false */","    asyncEvent._firing = new Y.Promise(function (resolve) { resolve(); });","","    asyncEvent.fire = function (data) {","        var args  = Y.Array(arguments, 0, true),","            stack, next;","","        asyncEvent._firing = asyncEvent._firing.then(function () {","            stack = {","                id: asyncEvent.id,","                next: asyncEvent,","                silent: asyncEvent.silent,","                stopped: 0,","                prevented: 0,","                bubbling: null,","                type: asyncEvent.type,","                defaultTargetOnly: asyncEvent.defaultTargetOnly","            };","            asyncEvent.details = args;","            // Execute on() subscribers","            var subs = asyncEvent._subscribers,","                args2 = [],","                e, i, len;","","                args2.push.apply(args2, data);","                e = asyncEvent._createFacade(args2);","","            e.target = e.target || instance;","            if (subs) {","                for (i = 0, len = subs.length; i < len; ++i) {","                    try {","                        subs[i].fn.call(subs[i].context, e);","                    }","                    catch (catchErr) {","                    }","                }","            }","            // Execute on() subscribers for each bubble target and their respective targets:","            if (asyncEvent.bubbles && !asyncEvent.stopped) {","                instance.bubble(asyncEvent, args, null, stack);","                e.prevented = Math.max(e.prevented, stack.prevented);","            }","","            // Resolve the _firing promise with either prefentedFn promise if it was prevented, or with a promise for","            // the result of the defaultFn followed by the execution of the after subs.","            return e.prevented ?","                asyncEvent.preventedFn.call(instance, e).then(null, function (reason) {","                    return false;","                }) :","                asyncEvent.defaultFn.call(instance, e).then(function () {","                    // no need to handle 'response' it is merged into 'e' within the defaultfunction","                    // Execute after() subscribers","","                    subs = asyncEvent._afters;","                    if (subs) {","                        for (i = 0, len = subs.length; i < len; ++i) {","                            try {","                                subs[i].fn.call(subs[i].context, e);","                            }","                            catch (catchErr) {","                            }","                        }","                    }","                    // Execute after() subscribers for each bubble target and their respective targets:","                    if (stack.afterQueue) {","                        while ((next = stack.afterQueue.last())) {","                            next();","                        }","                    }","","                // Catch errors/preventions and reset the promise state to fulfilled for","                // the next call to fire();","                }).then(null, function (reason) {","                    return false;","                });","        },","        function(reason) {","            var facade = {","                error   : (reason && (reason.message || reason)),","                src     : 'ModelList._publishAsync()'","            };","            instance._lazyFireErrorEvent(facade);","        });","    };","","    asyncEvent._fire = function (args) {","        return asyncEvent.fire(args[0]);","    };","    return asyncEvent;","};","","/**"," * Prevented defaultFn as a Promise. Makes internal e.promise to be rejected."," *"," * @method _prevDefFn"," * @param e {EventTarget}"," * @param e.promise {Y.Promise} promise passed by with the eventobject"," * @param e.promiseReject {Function} handle to the reject-method"," * @param e.promiseResolve {Function} handle to the resolve-method"," * @private"," * @since 0.3","*/","YModelList.prototype._prevDefFn = function(e) {","    e.promiseReject(new Error('preventDefaulted'));","};","","/**"," * This method is used internally and returns syncPromise() that is called with 'action'."," * If 'action' is not handled as a Promise -inside syncPromise- then this method will reject the promisi."," *"," * @method _syncTimeoutPromise"," * @param action {String} The sync-action to perform."," * @param [options] {Object} Sync options. The custom synclayer should pass through all options-properties to the server."," * @return {Y.Promise} returned response for each 'action' --> response --> resolve(dataobject) OR reject(reason)."," * The returned 'dataobject' might be an object or a string that can be turned into a json-object"," * @private"," * @since 0.2","*/","YModelList.prototype._syncTimeoutPromise = function(action, options) {","    var instance = this,","          syncpromise;","","    syncpromise = instance.syncPromise(action, options);","    if (!(syncpromise instanceof Y.Promise)) {","        syncpromise = new Y.Promise(function (resolve, reject) {","            var errormessage = 'syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';","            reject(new Error(errormessage));","        });","    }","    return syncpromise;","};","","// for backwards compatibility:","YModelList.prototype.destroyPromise = YModelList.prototype.destroyModelPromise;","","}, '@VERSION@', {","    \"requires\": [","        \"yui-base\",","        \"base-base\",","        \"base-build\",","        \"node-base\",","        \"json-parse\",","        \"promise\",","        \"model\",","        \"model-list\",","        \"gallery-itsamodelsyncpromise\",","        \"gallery-itsamodulesloadedpromise\"","    ]","});","","}());"]};
}
var __cov_3GKoR$ZYrmGv8l73dddnpQ = __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'];
__cov_3GKoR$ZYrmGv8l73dddnpQ.s['1']++;YUI.add('gallery-itsamodellistsyncpromise',function(Y,NAME){'use strict';__cov_3GKoR$ZYrmGv8l73dddnpQ.f['1']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['2']++;var YModelList=Y.ModelList,YArray=Y.Array,YObject=Y.Object,PUBLISHED='_pub_',READ='read',APPEND='append',DELETE='delete',READAPPEND=READ+APPEND,MODELSYNC='modelsync',GALLERYITSAMODELSYNCPROMISE='gallery-itsa'+MODELSYNC+'promise',AVAILABLESYNCMESSAGES={load:true,save:true,submit:true,destroy:true},DEFFN='_defFn_',ERROR='error',SAVE='save',SUBMIT='submit',LOAD='load',LOADAPPEND=LOAD+APPEND,DESTROY='destroy',DESTROYMODELS=DESTROY+'models',PROMISE='Promise',PARSED=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['2']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['3']++;if(typeof response==='string'){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['4']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['5']++;return Y.JSON.parse(response);}catch(ex){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['6']++;this.fire(ERROR,{error:ex,response:response,src:'parse'});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['7']++;return{};}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['8']++;return(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][0]++,response)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][1]++,{});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['9']++;YModelList.prototype.addMessageTarget=function(itsamessageviewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['3']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['10']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['11']++;Y.usePromise('gallery-itsamessagecontroller','gallery-itsamessageviewer','gallery-itsapanel').then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['4']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['12']++;return Y.ITSAMessageController.isReady();}).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['5']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['13']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][0]++,itsamessageviewer instanceof Y.ITSAPanel)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][1]++,itsamessageviewer=itsamessageviewer._itsastatusbar);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['14']++;if(itsamessageviewer instanceof Y.ITSAMessageViewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['15']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][1]++,instance.removeMessageTarget());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['16']++;instance._itsamessageListener=instance.on([LOAD,SUBMIT,SAVE,DESTROY],function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['6']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['17']++;var options=e.options,remove=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][0]++,options.remove)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][1]++,options[DELETE]),type=e.type,typesplit=type.split(':'),subtype=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][0]++,typesplit[1])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][1]++,typesplit[0]),statushandle,syncMessages;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['18']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][0]++,subtype!==DESTROY)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][1]++,remove)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['19']++;syncMessages=instance._defSyncMessages;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['20']++;statushandle=itsamessageviewer.showStatus((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][0]++,e.syncmessage)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][1]++,syncMessages)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][2]++,syncMessages[subtype])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][3]++,Y.Intl.get(GALLERYITSAMODELSYNCPROMISE)[subtype]),{source:MODELSYNC});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['21']++;e.promise.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['7']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['22']++;itsamessageviewer.removeStatus(statushandle);},function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['8']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['23']++;itsamessageviewer.removeStatus(statushandle);});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['24']++;instance._itsamessagedestroylistener1=instance.onceAfter(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['9']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['25']++;instance._itsamessageListener.detach();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['26']++;instance._itsamessagedestroylistener2=itsamessageviewer.once(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['10']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['27']++;instance._itsamessageListener.detach();});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][1]++;}});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['28']++;YArray.each([LOAD,LOADAPPEND,SAVE,SUBMIT,DESTROYMODELS],function(Fn){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['11']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['29']++;YModelList.prototype[Fn]=function(options,callback){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['12']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['30']++;var instance=this,promise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['31']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][0]++,promise=instance[Fn+PROMISE](options))&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][1]++,callback)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][2]++,promise.then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['13']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['32']++;callback(null,response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['14']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['33']++;callback(err);}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['34']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['35']++;YModelList.prototype[Fn+PROMISE]=function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['15']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['36']++;return this._createPromise(Fn,options);};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['37']++;YModelList.prototype.removeMessageTarget=function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['16']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['38']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['39']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][1]++,instance._itsamessageListener.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['40']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][0]++,instance._itsamessagedestroylistener1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][1]++,instance._itsamessagedestroylistener1.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['41']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][0]++,instance._itsamessagedestroylistener2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][1]++,instance._itsamessagedestroylistener2.detach());};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['42']++;YModelList.prototype.setSyncMessage=function(type,message){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['17']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['43']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['44']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][0]++,instance._defSyncMessages)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][1]++,instance._defSyncMessages={});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['45']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][0]++,AVAILABLESYNCMESSAGES[type])&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][1]++,instance._defSyncMessages[type]=message);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['46']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['47']++;YModelList.prototype._createPromise=function(type,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['18']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['48']++;var instance=this,promise,promiseResolve,promiseReject,extraOptions;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['49']++;promise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['19']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['50']++;promiseResolve=resolve;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['51']++;promiseReject=reject;});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['52']++;extraOptions={promise:promise,promiseResolve:promiseResolve,promiseReject:promiseReject,response:'',parsed:{},options:Y.merge(options)};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['53']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][0]++,typeof options==='object')&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][1]++,YObject.each(options,function(value,key){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['20']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['54']++;extraOptions[key]=value;}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['55']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][0]++,instance[PUBLISHED+type])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][1]++,instance[PUBLISHED+type]=instance._publishAsync(type,{defaultTargetOnly:true,emitFacade:true,broadcast:1,defaultFn:instance[DEFFN+type],preventedFn:instance._prevDefFn}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['56']++;instance.fire(type,extraOptions);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['57']++;return promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['58']++;YModelList.prototype[DEFFN+DESTROYMODELS]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['21']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['59']++;var instance=this,destroylist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['60']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['22']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['61']++;destroylist.push(model.destroyPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['62']++;Y.batch.apply(Y,destroylist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['23']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['63']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['24']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['64']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['65']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['66']++;YArray.each([LOAD,LOADAPPEND],function(eventType){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['25']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['67']++;YModelList.prototype[DEFFN+eventType]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['26']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['68']++;var instance=this,readsync=eventType===LOADAPPEND?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][0]++,READAPPEND):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][1]++,READ),options=e.options,errFunc,successFunc;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['69']++;errFunc=function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['27']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['70']++;var facade={options:options,error:err,src:eventType};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['71']++;instance._lazyFireErrorEvent(facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['72']++;e.promiseReject(new Error(err));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['73']++;successFunc=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['28']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['74']++;var parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['75']++;e.response=response;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['76']++;parsed=PARSED(response);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['77']++;if(parsed.responseText){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['78']++;parsed=parsed.responseText;}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['79']++;e.parsed=parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['80']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][0]++,eventType===LOADAPPEND)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][1]++,options.append)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['81']++;instance.add(parsed,options);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['82']++;instance.reset(parsed,options);}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['83']++;e.promiseResolve(response);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['84']++;if(instance.syncPromise){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['85']++;instance._syncTimeoutPromise(readsync,options).then(successFunc,errFunc);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['86']++;instance.sync(readsync,options,function(err,response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['29']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['87']++;if(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['88']++;errFunc(err);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['89']++;successFunc(response);}});}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['90']++;return e.promise;};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['91']++;YModelList.prototype[DEFFN+SAVE]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['30']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['92']++;var instance=this,savelist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['93']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['31']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['94']++;if(model.isModified()){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['95']++;savelist.push(model.savePromise(options));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['96']++;Y.batch.apply(Y,savelist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['32']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['97']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['33']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['98']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['99']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['100']++;YModelList.prototype[DEFFN+SUBMIT]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['34']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['101']++;var instance=this,submitlist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['102']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['35']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['103']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][0]++,model.submitPromise)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][1]++,submitlist.push(model.submitPromise(options)));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['104']++;Y.batch.apply(Y,submitlist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['36']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['105']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['37']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['106']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['107']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['108']++;YModelList.prototype._lazyFireErrorEvent=function(facade){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['38']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['109']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['110']++;if(!instance._errorEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['111']++;instance._errorEvent=instance.publish(ERROR,{broadcast:1});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['112']++;instance.fire(ERROR,facade);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['113']++;YModelList.prototype._publishAsync=function(type,opts){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['39']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['114']++;var instance=this,asyncEvent=instance.publish(type,opts);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['115']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][1]++,opts.broadcast===1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][2]++,instance.addTarget(Y));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['116']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][1]++,opts.broadcast===2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][2]++,instance.addTarget(YUI));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['117']++;asyncEvent._firing=new Y.Promise(function(resolve){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['40']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['118']++;resolve();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['119']++;asyncEvent.fire=function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['41']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['120']++;var args=Y.Array(arguments,0,true),stack,next;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['121']++;asyncEvent._firing=asyncEvent._firing.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['42']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['122']++;stack={id:asyncEvent.id,next:asyncEvent,silent:asyncEvent.silent,stopped:0,prevented:0,bubbling:null,type:asyncEvent.type,defaultTargetOnly:asyncEvent.defaultTargetOnly};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['123']++;asyncEvent.details=args;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['124']++;var subs=asyncEvent._subscribers,args2=[],e,i,len;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['125']++;args2.push.apply(args2,data);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['126']++;e=asyncEvent._createFacade(args2);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['127']++;e.target=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][0]++,e.target)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][1]++,instance);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['128']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['129']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['130']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['131']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['132']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][0]++,asyncEvent.bubbles)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][1]++,!asyncEvent.stopped)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['133']++;instance.bubble(asyncEvent,args,null,stack);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['134']++;e.prevented=Math.max(e.prevented,stack.prevented);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['135']++;return e.prevented?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][0]++,asyncEvent.preventedFn.call(instance,e).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['43']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['136']++;return false;})):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][1]++,asyncEvent.defaultFn.call(instance,e).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['44']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['137']++;subs=asyncEvent._afters;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['138']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['139']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['140']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['141']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['142']++;if(stack.afterQueue){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['36'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['143']++;while(next=stack.afterQueue.last()){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['144']++;next();}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['36'][1]++;}}).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['45']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['145']++;return false;}));},function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['46']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['146']++;var facade={error:(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['37'][0]++,reason)&&((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['37'][1]++,reason.message)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['37'][2]++,reason)),src:'ModelList._publishAsync()'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['147']++;instance._lazyFireErrorEvent(facade);});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['148']++;asyncEvent._fire=function(args){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['47']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['149']++;return asyncEvent.fire(args[0]);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['150']++;return asyncEvent;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['151']++;YModelList.prototype._prevDefFn=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['48']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['152']++;e.promiseReject(new Error('preventDefaulted'));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['153']++;YModelList.prototype._syncTimeoutPromise=function(action,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['49']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['154']++;var instance=this,syncpromise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['155']++;syncpromise=instance.syncPromise(action,options);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['156']++;if(!(syncpromise instanceof Y.Promise)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['38'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['157']++;syncpromise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['50']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['158']++;var errormessage='syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';__cov_3GKoR$ZYrmGv8l73dddnpQ.s['159']++;reject(new Error(errormessage));});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['38'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['160']++;return syncpromise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['161']++;YModelList.prototype.destroyPromise=YModelList.prototype.destroyModelPromise;},'@VERSION@',{'requires':['yui-base','base-base','base-build','node-base','json-parse','promise','model','model-list','gallery-itsamodelsyncpromise','gallery-itsamodulesloadedpromise']});
