if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js']) {
   __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'] = {"path":"build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":44},"end":{"line":1,"column":63}}},"2":{"name":"(anonymous_2)","line":107,"loc":{"start":{"line":107,"column":13},"end":{"line":107,"column":33}}},"3":{"name":"(anonymous_3)","line":131,"loc":{"start":{"line":131,"column":40},"end":{"line":131,"column":68}}},"4":{"name":"(anonymous_4)","line":134,"loc":{"start":{"line":134,"column":8},"end":{"line":134,"column":19}}},"5":{"name":"(anonymous_5)","line":138,"loc":{"start":{"line":138,"column":8},"end":{"line":138,"column":19}}},"6":{"name":"(anonymous_6)","line":145,"loc":{"start":{"line":145,"column":20},"end":{"line":145,"column":32}}},"7":{"name":"(anonymous_7)","line":155,"loc":{"start":{"line":155,"column":32},"end":{"line":155,"column":43}}},"8":{"name":"(anonymous_8)","line":158,"loc":{"start":{"line":158,"column":32},"end":{"line":158,"column":43}}},"9":{"name":"(anonymous_9)","line":165,"loc":{"start":{"line":165,"column":84},"end":{"line":165,"column":95}}},"10":{"name":"(anonymous_10)","line":168,"loc":{"start":{"line":168,"column":88},"end":{"line":168,"column":99}}},"11":{"name":"(anonymous_11)","line":432,"loc":{"start":{"line":432,"column":4},"end":{"line":432,"column":17}}},"12":{"name":"(anonymous_12)","line":433,"loc":{"start":{"line":433,"column":35},"end":{"line":433,"column":63}}},"13":{"name":"(anonymous_13)","line":440,"loc":{"start":{"line":440,"column":16},"end":{"line":440,"column":35}}},"14":{"name":"(anonymous_14)","line":443,"loc":{"start":{"line":443,"column":16},"end":{"line":443,"column":30}}},"15":{"name":"(anonymous_15)","line":450,"loc":{"start":{"line":450,"column":43},"end":{"line":450,"column":62}}},"16":{"name":"(anonymous_16)","line":462,"loc":{"start":{"line":462,"column":43},"end":{"line":462,"column":54}}},"17":{"name":"(anonymous_17)","line":480,"loc":{"start":{"line":480,"column":38},"end":{"line":480,"column":62}}},"18":{"name":"(anonymous_18)","line":484,"loc":{"start":{"line":484,"column":28},"end":{"line":484,"column":55}}},"19":{"name":"(anonymous_19)","line":501,"loc":{"start":{"line":501,"column":8},"end":{"line":501,"column":29}}},"20":{"name":"(anonymous_20)","line":536,"loc":{"start":{"line":536,"column":44},"end":{"line":536,"column":56}}},"21":{"name":"(anonymous_21)","line":542,"loc":{"start":{"line":542,"column":8},"end":{"line":542,"column":24}}},"22":{"name":"(anonymous_22)","line":548,"loc":{"start":{"line":548,"column":8},"end":{"line":548,"column":27}}},"23":{"name":"(anonymous_23)","line":551,"loc":{"start":{"line":551,"column":8},"end":{"line":551,"column":22}}},"24":{"name":"(anonymous_24)","line":599,"loc":{"start":{"line":599,"column":4},"end":{"line":599,"column":24}}},"25":{"name":"(anonymous_25)","line":600,"loc":{"start":{"line":600,"column":48},"end":{"line":600,"column":61}}},"26":{"name":"(anonymous_26)","line":606,"loc":{"start":{"line":606,"column":22},"end":{"line":606,"column":36}}},"27":{"name":"(anonymous_27)","line":615,"loc":{"start":{"line":615,"column":26},"end":{"line":615,"column":45}}},"28":{"name":"(anonymous_28)","line":642,"loc":{"start":{"line":642,"column":49},"end":{"line":642,"column":74}}},"29":{"name":"(anonymous_29)","line":677,"loc":{"start":{"line":677,"column":35},"end":{"line":677,"column":47}}},"30":{"name":"(anonymous_30)","line":682,"loc":{"start":{"line":682,"column":8},"end":{"line":682,"column":24}}},"31":{"name":"(anonymous_31)","line":690,"loc":{"start":{"line":690,"column":8},"end":{"line":690,"column":27}}},"32":{"name":"(anonymous_32)","line":693,"loc":{"start":{"line":693,"column":8},"end":{"line":693,"column":22}}},"33":{"name":"(anonymous_33)","line":717,"loc":{"start":{"line":717,"column":37},"end":{"line":717,"column":49}}},"34":{"name":"(anonymous_34)","line":723,"loc":{"start":{"line":723,"column":8},"end":{"line":723,"column":24}}},"35":{"name":"(anonymous_35)","line":731,"loc":{"start":{"line":731,"column":8},"end":{"line":731,"column":27}}},"36":{"name":"(anonymous_36)","line":734,"loc":{"start":{"line":734,"column":8},"end":{"line":734,"column":22}}},"37":{"name":"(anonymous_37)","line":749,"loc":{"start":{"line":749,"column":43},"end":{"line":749,"column":60}}},"38":{"name":"(anonymous_38)","line":831,"loc":{"start":{"line":831,"column":37},"end":{"line":831,"column":58}}},"39":{"name":"(anonymous_39)","line":839,"loc":{"start":{"line":839,"column":39},"end":{"line":839,"column":58}}},"40":{"name":"(anonymous_40)","line":841,"loc":{"start":{"line":841,"column":22},"end":{"line":841,"column":38}}},"41":{"name":"(anonymous_41)","line":845,"loc":{"start":{"line":845,"column":53},"end":{"line":845,"column":65}}},"42":{"name":"(anonymous_42)","line":884,"loc":{"start":{"line":884,"column":68},"end":{"line":884,"column":86}}},"43":{"name":"(anonymous_43)","line":887,"loc":{"start":{"line":887,"column":60},"end":{"line":887,"column":72}}},"44":{"name":"(anonymous_44)","line":910,"loc":{"start":{"line":910,"column":30},"end":{"line":910,"column":48}}},"45":{"name":"(anonymous_45)","line":914,"loc":{"start":{"line":914,"column":8},"end":{"line":914,"column":25}}},"46":{"name":"(anonymous_46)","line":923,"loc":{"start":{"line":923,"column":23},"end":{"line":923,"column":39}}},"47":{"name":"(anonymous_47)","line":940,"loc":{"start":{"line":940,"column":34},"end":{"line":940,"column":46}}},"48":{"name":"(anonymous_48)","line":956,"loc":{"start":{"line":956,"column":43},"end":{"line":956,"column":69}}},"49":{"name":"(anonymous_49)","line":962,"loc":{"start":{"line":962,"column":36},"end":{"line":962,"column":63}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":986,"column":3}},"2":{"start":{"line":21,"column":3},"end":{"line":121,"column":6}},"3":{"start":{"line":108,"column":8},"end":{"line":119,"column":9}},"4":{"start":{"line":109,"column":12},"end":{"line":118,"column":13}},"5":{"start":{"line":110,"column":16},"end":{"line":110,"column":46}},"6":{"start":{"line":112,"column":16},"end":{"line":116,"column":19}},"7":{"start":{"line":117,"column":16},"end":{"line":117,"column":26}},"8":{"start":{"line":120,"column":8},"end":{"line":120,"column":30}},"9":{"start":{"line":131,"column":0},"end":{"line":174,"column":2}},"10":{"start":{"line":132,"column":4},"end":{"line":132,"column":24}},"11":{"start":{"line":133,"column":4},"end":{"line":173,"column":6}},"12":{"start":{"line":135,"column":12},"end":{"line":135,"column":53}},"13":{"start":{"line":139,"column":12},"end":{"line":171,"column":13}},"14":{"start":{"line":141,"column":16},"end":{"line":141,"column":80}},"15":{"start":{"line":143,"column":16},"end":{"line":164,"column":18}},"16":{"start":{"line":146,"column":24},"end":{"line":151,"column":41}},"17":{"start":{"line":152,"column":24},"end":{"line":162,"column":25}},"18":{"start":{"line":153,"column":28},"end":{"line":153,"column":159}},"19":{"start":{"line":154,"column":28},"end":{"line":161,"column":30}},"20":{"start":{"line":156,"column":36},"end":{"line":156,"column":81}},"21":{"start":{"line":159,"column":36},"end":{"line":159,"column":81}},"22":{"start":{"line":165,"column":16},"end":{"line":167,"column":19}},"23":{"start":{"line":166,"column":20},"end":{"line":166,"column":59}},"24":{"start":{"line":168,"column":16},"end":{"line":170,"column":19}},"25":{"start":{"line":169,"column":20},"end":{"line":169,"column":59}},"26":{"start":{"line":430,"column":0},"end":{"line":454,"column":2}},"27":{"start":{"line":433,"column":8},"end":{"line":449,"column":10}},"28":{"start":{"line":434,"column":12},"end":{"line":435,"column":24}},"29":{"start":{"line":439,"column":12},"end":{"line":446,"column":14}},"30":{"start":{"line":441,"column":20},"end":{"line":441,"column":45}},"31":{"start":{"line":444,"column":20},"end":{"line":444,"column":34}},"32":{"start":{"line":448,"column":12},"end":{"line":448,"column":28}},"33":{"start":{"line":450,"column":8},"end":{"line":452,"column":10}},"34":{"start":{"line":451,"column":12},"end":{"line":451,"column":52}},"35":{"start":{"line":462,"column":0},"end":{"line":469,"column":2}},"36":{"start":{"line":463,"column":4},"end":{"line":463,"column":24}},"37":{"start":{"line":465,"column":4},"end":{"line":465,"column":76}},"38":{"start":{"line":466,"column":4},"end":{"line":466,"column":92}},"39":{"start":{"line":467,"column":4},"end":{"line":467,"column":92}},"40":{"start":{"line":480,"column":0},"end":{"line":518,"column":2}},"41":{"start":{"line":481,"column":4},"end":{"line":482,"column":61}},"42":{"start":{"line":484,"column":4},"end":{"line":487,"column":7}},"43":{"start":{"line":485,"column":8},"end":{"line":485,"column":33}},"44":{"start":{"line":486,"column":8},"end":{"line":486,"column":31}},"45":{"start":{"line":490,"column":4},"end":{"line":497,"column":6}},"46":{"start":{"line":499,"column":4},"end":{"line":504,"column":6}},"47":{"start":{"line":502,"column":12},"end":{"line":502,"column":38}},"48":{"start":{"line":506,"column":4},"end":{"line":514,"column":82}},"49":{"start":{"line":516,"column":4},"end":{"line":516,"column":38}},"50":{"start":{"line":517,"column":4},"end":{"line":517,"column":19}},"51":{"start":{"line":536,"column":0},"end":{"line":556,"column":2}},"52":{"start":{"line":537,"column":4},"end":{"line":539,"column":28}},"53":{"start":{"line":541,"column":4},"end":{"line":545,"column":6}},"54":{"start":{"line":543,"column":12},"end":{"line":543,"column":60}},"55":{"start":{"line":546,"column":4},"end":{"line":554,"column":6}},"56":{"start":{"line":549,"column":12},"end":{"line":549,"column":39}},"57":{"start":{"line":552,"column":12},"end":{"line":552,"column":44}},"58":{"start":{"line":555,"column":4},"end":{"line":555,"column":21}},"59":{"start":{"line":597,"column":0},"end":{"line":654,"column":2}},"60":{"start":{"line":600,"column":8},"end":{"line":652,"column":10}},"61":{"start":{"line":601,"column":12},"end":{"line":604,"column":37}},"62":{"start":{"line":606,"column":12},"end":{"line":614,"column":14}},"63":{"start":{"line":607,"column":16},"end":{"line":611,"column":18}},"64":{"start":{"line":612,"column":16},"end":{"line":612,"column":53}},"65":{"start":{"line":613,"column":16},"end":{"line":613,"column":48}},"66":{"start":{"line":615,"column":12},"end":{"line":633,"column":14}},"67":{"start":{"line":616,"column":16},"end":{"line":616,"column":27}},"68":{"start":{"line":617,"column":16},"end":{"line":617,"column":38}},"69":{"start":{"line":618,"column":16},"end":{"line":618,"column":42}},"70":{"start":{"line":619,"column":16},"end":{"line":622,"column":17}},"71":{"start":{"line":621,"column":20},"end":{"line":621,"column":49}},"72":{"start":{"line":623,"column":16},"end":{"line":623,"column":34}},"73":{"start":{"line":626,"column":16},"end":{"line":631,"column":17}},"74":{"start":{"line":627,"column":20},"end":{"line":627,"column":50}},"75":{"start":{"line":630,"column":20},"end":{"line":630,"column":52}},"76":{"start":{"line":632,"column":16},"end":{"line":632,"column":43}},"77":{"start":{"line":634,"column":12},"end":{"line":650,"column":13}},"78":{"start":{"line":636,"column":16},"end":{"line":639,"column":18}},"79":{"start":{"line":642,"column":16},"end":{"line":649,"column":19}},"80":{"start":{"line":643,"column":20},"end":{"line":648,"column":21}},"81":{"start":{"line":644,"column":24},"end":{"line":644,"column":37}},"82":{"start":{"line":647,"column":24},"end":{"line":647,"column":46}},"83":{"start":{"line":651,"column":12},"end":{"line":651,"column":29}},"84":{"start":{"line":677,"column":0},"end":{"line":698,"column":2}},"85":{"start":{"line":678,"column":4},"end":{"line":680,"column":28}},"86":{"start":{"line":681,"column":4},"end":{"line":687,"column":6}},"87":{"start":{"line":683,"column":12},"end":{"line":685,"column":13}},"88":{"start":{"line":684,"column":16},"end":{"line":684,"column":58}},"89":{"start":{"line":688,"column":4},"end":{"line":696,"column":6}},"90":{"start":{"line":691,"column":12},"end":{"line":691,"column":39}},"91":{"start":{"line":694,"column":12},"end":{"line":694,"column":44}},"92":{"start":{"line":697,"column":4},"end":{"line":697,"column":21}},"93":{"start":{"line":717,"column":0},"end":{"line":739,"column":2}},"94":{"start":{"line":718,"column":4},"end":{"line":720,"column":28}},"95":{"start":{"line":722,"column":4},"end":{"line":728,"column":6}},"96":{"start":{"line":725,"column":12},"end":{"line":725,"column":81}},"97":{"start":{"line":729,"column":4},"end":{"line":737,"column":6}},"98":{"start":{"line":732,"column":12},"end":{"line":732,"column":39}},"99":{"start":{"line":735,"column":12},"end":{"line":735,"column":44}},"100":{"start":{"line":738,"column":4},"end":{"line":738,"column":21}},"101":{"start":{"line":749,"column":0},"end":{"line":759,"column":2}},"102":{"start":{"line":750,"column":4},"end":{"line":750,"column":24}},"103":{"start":{"line":753,"column":4},"end":{"line":757,"column":5}},"104":{"start":{"line":754,"column":8},"end":{"line":756,"column":11}},"105":{"start":{"line":758,"column":4},"end":{"line":758,"column":33}},"106":{"start":{"line":831,"column":0},"end":{"line":927,"column":2}},"107":{"start":{"line":832,"column":4},"end":{"line":833,"column":50}},"108":{"start":{"line":836,"column":4},"end":{"line":836,"column":58}},"109":{"start":{"line":837,"column":4},"end":{"line":837,"column":60}},"110":{"start":{"line":839,"column":4},"end":{"line":839,"column":74}},"111":{"start":{"line":839,"column":60},"end":{"line":839,"column":70}},"112":{"start":{"line":841,"column":4},"end":{"line":921,"column":6}},"113":{"start":{"line":842,"column":8},"end":{"line":843,"column":24}},"114":{"start":{"line":845,"column":8},"end":{"line":920,"column":11}},"115":{"start":{"line":846,"column":12},"end":{"line":855,"column":14}},"116":{"start":{"line":856,"column":12},"end":{"line":856,"column":38}},"117":{"start":{"line":858,"column":12},"end":{"line":860,"column":26}},"118":{"start":{"line":862,"column":16},"end":{"line":862,"column":46}},"119":{"start":{"line":863,"column":16},"end":{"line":863,"column":52}},"120":{"start":{"line":865,"column":12},"end":{"line":865,"column":44}},"121":{"start":{"line":866,"column":12},"end":{"line":874,"column":13}},"122":{"start":{"line":867,"column":16},"end":{"line":873,"column":17}},"123":{"start":{"line":868,"column":20},"end":{"line":872,"column":21}},"124":{"start":{"line":869,"column":24},"end":{"line":869,"column":60}},"125":{"start":{"line":876,"column":12},"end":{"line":879,"column":13}},"126":{"start":{"line":877,"column":16},"end":{"line":877,"column":63}},"127":{"start":{"line":878,"column":16},"end":{"line":878,"column":69}},"128":{"start":{"line":883,"column":12},"end":{"line":912,"column":19}},"129":{"start":{"line":885,"column":20},"end":{"line":885,"column":33}},"130":{"start":{"line":891,"column":20},"end":{"line":891,"column":46}},"131":{"start":{"line":892,"column":20},"end":{"line":900,"column":21}},"132":{"start":{"line":893,"column":24},"end":{"line":899,"column":25}},"133":{"start":{"line":894,"column":28},"end":{"line":898,"column":29}},"134":{"start":{"line":895,"column":32},"end":{"line":895,"column":68}},"135":{"start":{"line":902,"column":20},"end":{"line":906,"column":21}},"136":{"start":{"line":903,"column":24},"end":{"line":905,"column":25}},"137":{"start":{"line":904,"column":28},"end":{"line":904,"column":35}},"138":{"start":{"line":911,"column":20},"end":{"line":911,"column":33}},"139":{"start":{"line":915,"column":12},"end":{"line":918,"column":14}},"140":{"start":{"line":919,"column":12},"end":{"line":919,"column":49}},"141":{"start":{"line":923,"column":4},"end":{"line":925,"column":6}},"142":{"start":{"line":924,"column":8},"end":{"line":924,"column":40}},"143":{"start":{"line":926,"column":4},"end":{"line":926,"column":22}},"144":{"start":{"line":940,"column":0},"end":{"line":942,"column":2}},"145":{"start":{"line":941,"column":4},"end":{"line":941,"column":51}},"146":{"start":{"line":956,"column":0},"end":{"line":968,"column":2}},"147":{"start":{"line":957,"column":4},"end":{"line":958,"column":22}},"148":{"start":{"line":960,"column":4},"end":{"line":960,"column":56}},"149":{"start":{"line":961,"column":4},"end":{"line":966,"column":5}},"150":{"start":{"line":962,"column":8},"end":{"line":965,"column":11}},"151":{"start":{"line":963,"column":12},"end":{"line":963,"column":118}},"152":{"start":{"line":964,"column":12},"end":{"line":964,"column":44}},"153":{"start":{"line":967,"column":4},"end":{"line":967,"column":23}},"154":{"start":{"line":971,"column":0},"end":{"line":971,"column":79}}},"branchMap":{"1":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"2":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":15},"end":{"line":120,"column":23}},{"start":{"line":120,"column":27},"end":{"line":120,"column":29}}]},"3":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":12},"end":{"line":139,"column":12}},{"start":{"line":139,"column":12},"end":{"line":139,"column":12}}]},"4":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":16},"end":{"line":141,"column":45}},{"start":{"line":141,"column":49},"end":{"line":141,"column":79}}]},"5":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":37},"end":{"line":147,"column":51}},{"start":{"line":147,"column":55},"end":{"line":147,"column":70}}]},"6":{"line":150,"type":"binary-expr","locations":[{"start":{"line":150,"column":38},"end":{"line":150,"column":50}},{"start":{"line":150,"column":54},"end":{"line":150,"column":66}}]},"7":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":24},"end":{"line":152,"column":24}},{"start":{"line":152,"column":24},"end":{"line":152,"column":24}}]},"8":{"line":152,"type":"binary-expr","locations":[{"start":{"line":152,"column":29},"end":{"line":152,"column":46}},{"start":{"line":152,"column":51},"end":{"line":152,"column":57}}]},"9":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":72},"end":{"line":153,"column":87}},{"start":{"line":153,"column":91},"end":{"line":153,"column":136}}]},"10":{"line":439,"type":"binary-expr","locations":[{"start":{"line":439,"column":13},"end":{"line":439,"column":50}},{"start":{"line":439,"column":55},"end":{"line":439,"column":63}},{"start":{"line":439,"column":67},"end":{"line":446,"column":13}}]},"11":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":4},"end":{"line":465,"column":33}},{"start":{"line":465,"column":37},"end":{"line":465,"column":75}}]},"12":{"line":466,"type":"binary-expr","locations":[{"start":{"line":466,"column":4},"end":{"line":466,"column":41}},{"start":{"line":466,"column":45},"end":{"line":466,"column":91}}]},"13":{"line":467,"type":"binary-expr","locations":[{"start":{"line":467,"column":4},"end":{"line":467,"column":41}},{"start":{"line":467,"column":45},"end":{"line":467,"column":91}}]},"14":{"line":499,"type":"binary-expr","locations":[{"start":{"line":499,"column":5},"end":{"line":499,"column":30}},{"start":{"line":499,"column":35},"end":{"line":504,"column":5}}]},"15":{"line":506,"type":"binary-expr","locations":[{"start":{"line":506,"column":4},"end":{"line":506,"column":28}},{"start":{"line":506,"column":33},"end":{"line":514,"column":80}}]},"16":{"line":602,"type":"cond-expr","locations":[{"start":{"line":602,"column":54},"end":{"line":602,"column":64}},{"start":{"line":602,"column":67},"end":{"line":602,"column":71}}]},"17":{"line":619,"type":"if","locations":[{"start":{"line":619,"column":16},"end":{"line":619,"column":16}},{"start":{"line":619,"column":16},"end":{"line":619,"column":16}}]},"18":{"line":626,"type":"if","locations":[{"start":{"line":626,"column":16},"end":{"line":626,"column":16}},{"start":{"line":626,"column":16},"end":{"line":626,"column":16}}]},"19":{"line":626,"type":"binary-expr","locations":[{"start":{"line":626,"column":21},"end":{"line":626,"column":43}},{"start":{"line":626,"column":48},"end":{"line":626,"column":62}}]},"20":{"line":634,"type":"if","locations":[{"start":{"line":634,"column":12},"end":{"line":634,"column":12}},{"start":{"line":634,"column":12},"end":{"line":634,"column":12}}]},"21":{"line":643,"type":"if","locations":[{"start":{"line":643,"column":20},"end":{"line":643,"column":20}},{"start":{"line":643,"column":20},"end":{"line":643,"column":20}}]},"22":{"line":683,"type":"if","locations":[{"start":{"line":683,"column":12},"end":{"line":683,"column":12}},{"start":{"line":683,"column":12},"end":{"line":683,"column":12}}]},"23":{"line":725,"type":"binary-expr","locations":[{"start":{"line":725,"column":12},"end":{"line":725,"column":31}},{"start":{"line":725,"column":35},"end":{"line":725,"column":80}}]},"24":{"line":753,"type":"if","locations":[{"start":{"line":753,"column":4},"end":{"line":753,"column":4}},{"start":{"line":753,"column":4},"end":{"line":753,"column":4}}]},"25":{"line":836,"type":"binary-expr","locations":[{"start":{"line":836,"column":4},"end":{"line":836,"column":8}},{"start":{"line":836,"column":13},"end":{"line":836,"column":31}},{"start":{"line":836,"column":36},"end":{"line":836,"column":57}}]},"26":{"line":837,"type":"binary-expr","locations":[{"start":{"line":837,"column":4},"end":{"line":837,"column":8}},{"start":{"line":837,"column":13},"end":{"line":837,"column":31}},{"start":{"line":837,"column":36},"end":{"line":837,"column":59}}]},"27":{"line":865,"type":"binary-expr","locations":[{"start":{"line":865,"column":23},"end":{"line":865,"column":31}},{"start":{"line":865,"column":35},"end":{"line":865,"column":43}}]},"28":{"line":866,"type":"if","locations":[{"start":{"line":866,"column":12},"end":{"line":866,"column":12}},{"start":{"line":866,"column":12},"end":{"line":866,"column":12}}]},"29":{"line":876,"type":"if","locations":[{"start":{"line":876,"column":12},"end":{"line":876,"column":12}},{"start":{"line":876,"column":12},"end":{"line":876,"column":12}}]},"30":{"line":876,"type":"binary-expr","locations":[{"start":{"line":876,"column":16},"end":{"line":876,"column":34}},{"start":{"line":876,"column":38},"end":{"line":876,"column":57}}]},"31":{"line":883,"type":"cond-expr","locations":[{"start":{"line":884,"column":16},"end":{"line":886,"column":18}},{"start":{"line":887,"column":16},"end":{"line":912,"column":18}}]},"32":{"line":892,"type":"if","locations":[{"start":{"line":892,"column":20},"end":{"line":892,"column":20}},{"start":{"line":892,"column":20},"end":{"line":892,"column":20}}]},"33":{"line":902,"type":"if","locations":[{"start":{"line":902,"column":20},"end":{"line":902,"column":20}},{"start":{"line":902,"column":20},"end":{"line":902,"column":20}}]},"34":{"line":916,"type":"binary-expr","locations":[{"start":{"line":916,"column":27},"end":{"line":916,"column":33}},{"start":{"line":916,"column":38},"end":{"line":916,"column":52}},{"start":{"line":916,"column":56},"end":{"line":916,"column":62}}]},"35":{"line":961,"type":"if","locations":[{"start":{"line":961,"column":4},"end":{"line":961,"column":4}},{"start":{"line":961,"column":4},"end":{"line":961,"column":4}}]}},"code":["(function () { YUI.add('gallery-itsamodellistsyncpromise', function (Y, NAME) {","","'use strict';","","/*jshint maxlen:200 */","","/**"," *"," * This module extends Y.ModelList by introducing Promised sync-methods. It also transforms Y.ModelList's sync-events into true events"," * with a defaultFunc which can be prevented. This means the 'on'-events will be fired before syncing and the 'after'-events after syncing."," *"," * @module gallery-itsamodellistsyncpromise"," * @class Y.ModelList"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","   var YModelList = Y.ModelList,","       YArray = Y.Array,","       YObject = Y.Object,","       PUBLISHED = '_published',","       READ = 'read',","       APPEND = 'append',","       DELETE = 'delete',","       READAPPEND = READ+APPEND,","       MODELSYNC = 'modelsync',","       DEFFN = '_defFn_',","   /**","     * Fired when an error occurs, such as when an attribute (or property) doesn't validate or when","     * the sync layer submit-function returns an error.","     * @event error","     * @param e {EventFacade} Event Facade including:","     * @param e.error {any} Error message.","     * @param e.src {String} Source of the error. May be one of the following (or any","     *                     custom error source defined by a Model subclass):","     *","     * `submit`: An error submitting the model from within a sync layer.","     *","     * `attributevalidation`: An error validating an attribute (or property). The attribute (or objectproperty)","     *                        that failed validation will be provided as the `attribute` property on the event facade.","     *","     * @param e.attribute {String} The attribute/property that failed validation.","     * @param e.validationerror {String} The errormessage in case of attribute-validation error.","    **/","    ERROR = 'error',","","    /**","     * Fired when all changed models of the modellist are saved through the Model-sync layer.","     * @event save","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SAVE = 'save',","","   /**","     * Fired when models are submitted through the Model-sync layer.","     * @event submit","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    SUBMIT = 'submit',","","   /**","     * Fired when models are read from the ModelList-sync layer.","     * @event load","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOAD = 'load',","","   /**","     * Fired when models are appended to the ModelList by the ModelList-sync layer.","     * @event loadappend","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    LOADAPPEND = LOAD+APPEND,","","   /**","     * Fired when models are destroyed from the ModelList-sync layer.","     * @event destroymodels","     * @param e {EventFacade} Event Facade including:","     * @param e.promise {Y.Promise} promise passed by with the eventobject","     * @param e.promiseReject {Function} handle to the reject-method","     * @param e.promiseResolve {Function} handle to the resolve-method","     * @since 0.1","    **/","    DESTROY = 'destroy',","    DESTROYMODELS = DESTROY+'models',","    PROMISE = 'Promise',","","    PARSED = function (response) {","        if (typeof response === 'string') {","            try {","                return Y.JSON.parse(response);","            } catch (ex) {","                this.fire(ERROR, {","                    error   : ex,","                    response: response,","                    src     : 'parse'","                });","                return {};","            }","        }","        return response || {};","    };","","/**"," * Makes sync-messages to target the specified messageViewer. You can only target to 1 MessageViewer at the same time.<br>"," * See gallery-itsamessageviewer for more info."," *"," * @method addMessageTarget"," * @param itsamessageviewer {Y.ITSAMessageViewer}"," * @since 0.4","*/","YModelList.prototype.addMessageTarget = function(itsamessageviewer) {","    var instance = this;","    Y.usePromise('gallery-itsamessagecontroller', 'gallery-itsamessageviewer').then(","        function() {","            return Y.ITSAMessageController.isReady();","        }","    ).then(","        function() {","            if (itsamessageviewer instanceof Y.ITSAMessageViewer) {","/*jshint expr:true */","                instance._itsamessageListener && instance.removeMessageTarget();","/*jshint expr:false */","                instance._itsamessageListener = instance.on(","                    [LOAD, SUBMIT, SAVE, DESTROY],","                    function(e) {","                        var options = e.options,","                            remove = options.remove || options[DELETE],","                            type = e.type,","                            typesplit = type.split(':'),","                            subtype = typesplit[1] || typesplit[0],","                            statushandle;","                        if ((subtype!==DESTROY) || remove) {","                            statushandle = itsamessageviewer.showStatus(e.statusmessage || Y.ITSAMessageController._syncMessage[subtype], {source: MODELSYNC});","                            e.promise.then(","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                },","                                function() {","                                    itsamessageviewer.removeStatus(statushandle);","                                }","                            );","                        }","                    }","                );","                instance._itsamessagedestroylistener1 = instance.onceAfter(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","                instance._itsamessagedestroylistener2 = itsamessageviewer.once(DESTROY, function() {","                    instance._itsamessageListener.detach();","                });","            }","        }","    );","};","","/**","  * Destroys this model instance and removes it from its containing lists, if any. The 'callback', if one is provided,","  * will be called after the model is destroyed.<br /><br />","  * If `options.remove` is `true`, then this method delegates to the `sync()` method to delete the model from the persistence layer, which is an","  * asynchronous action. In this case, the 'callback' (if provided) will be called after the sync layer indicates success or failure of the delete operation.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>destroyPromise()</b>.<br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method destroymodels","  * @param {Object} [options] Sync options. It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed.","  *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called after the model has been destroyed (and deleted via the sync layer if `options.remove` is `true`).","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. Otherwise 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable","*/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * If `options.remove` is `true`, then this method delegates to the `sync()`"," * method to delete the model from the persistence layer, which is an"," * asynchronous action."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroymodelsPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {Boolean} [options.remove=false] If `true`, the model will be deleted via the sync layer in addition to the instance being destroyed."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Destroys this model instance and removes it from its containing lists, if any."," * <br /><br />"," * Deprecated, use destroyModelsPromise instead (as long as available both methods ect the same)."," * <br /><br />","  * This method will fire an `error` event when syncing (using options.remove=true) should fail."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'destroy' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method destroyPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message)."," * @deprecated","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method load","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**","  * Loads this model from the server.<br />","  * This method delegates to the `sync()` method to perform the actual load","  * operation, which is an asynchronous action. Specify a 'callback' function to","  * be notified of success or failure.","  * <br /><br />","  * An unsuccessful load operation will fire an `error` event with the `src` value \"load\".","  * <br /><br />","  * If the load operation succeeds and one or more of the loaded attributes","  * differ from this model's current attributes, a `change` event will be fired.","  * <br /><br />","  * To keep track of the proccess, it is preferable to use <b>loadPromise()</b>.<br />","  * This method will fire 2 events: 'loadstart' before syncing and 'load' or ERROR after syncing.","  * <br /><br />","  * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!","  *","  * @method loadappend","  * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting the loaded attributes.","  *                           It's up to the custom sync implementation to determine what options it supports or requires, if any.","  *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer.","  * @param {callback} [callback] Called when the sync operation finishes.","  *   @param {Error|null} callback.err If an error occurred, this parameter will contain the error. If the sync operation succeeded, 'err' will be null.","  *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method, which is expected to parse it and return an attribute hash.","  * @chainable"," */","","/**"," * Loads this model from the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual load"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," * <br /><br />"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'load' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method loadappendPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious loading. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason) (examine reason.message).","**/","","/**"," * Saves this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method save"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during saving destruction. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Saves this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method savePromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronious saving. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","/**"," * Submits this model to the server."," *"," * This method delegates to the `sync()` method to perform the actual save operation, which is an asynchronous action."," * Specify a 'callback' function to be notified of success or failure."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in the server's response differ from this model's current attributes,"," * a `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * To keep track of the process, it is preferable to use <b>savePromise()</b>.<br />"," * This method will fire 2 events: 'savestart' before syncing and 'save' or ERROR after syncing."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submit"," * @param {Object} [options] Options to be passed to `sync()` and to `set()` when setting synced attributes."," *                           It's up to the custom sync implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @param {Function} [callback] Called when the sync operation finishes."," *   @param {Error|null} callback.err If an error occurred or validation failed, this parameter will contain the error."," *                                    If the sync operation succeeded, 'err' will be null."," *   @param {Any} callback.response The server's response. This value will be passed to the `parse()` method,"," *                                  which is expected to parse it and return an attribute hash."," * @chainable","*/","","/**"," * Submits this model to the server."," * <br /><br />"," * This method delegates to the `sync()` method to perform the actual save"," * operation, which is an asynchronous action."," * <br /><br />"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," * <br /><br />"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," * <br /><br />"," * If the operation succeeds, but you let the server return an <b>id=-1</b> then the model is assumed to be destroyed. This will lead to fireing the `destroy` event."," * <br /><br />"," * <b>CAUTION</b> The sync-method with action 'save' <b>must call its callback-function</b> in order to work as espected!"," *"," * @method submitPromise"," * @param {Object} [options] Options to be passed to `sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," *   @param {String} [options.statusmessage] Message that should appear on a Y.ITSAMessageViewer during asynchronous submission. Will overrule the default message. See gallery-itsamessageviewer."," * @return {Y.Promise} promised response --> resolve(response) OR reject(reason). (examine reason.message).","**/","","YArray.each(","    [LOAD, LOADAPPEND, SAVE, SUBMIT, DESTROYMODELS],","    function(Fn) {","        YModelList.prototype[Fn] = function(options, callback) {","            var instance = this,","                promise;","","            // by overwriting the default 'save'-method we manage to fire 'destroystart'-event.","        /*jshint expr:true */","            (promise=instance[Fn+PROMISE](options)) && callback && promise.then(","                function(response) {","                    callback(null, response);","                },","                function(err) {","                    callback(err);","                }","            );","        /*jshint expr:false */","            return instance;","        };","        YModelList.prototype[Fn+PROMISE] = function (options) {","            return this._createPromise(Fn, options);","        };","    }",");","","/**"," * Removes the messageViewer-target that was set up by addMessageTarget()."," *"," * @method removeMessageTarget"," * @since 0.1","*/","YModelList.prototype.removeMessageTarget = function() {","    var instance = this;","/*jshint expr:true */","    instance._itsamessageListener && instance._itsamessageListener.detach();","    instance._itsamessagedestroylistener1 && instance._itsamessagedestroylistener1.detach();","    instance._itsamessagedestroylistener2 && instance._itsamessagedestroylistener2.detach();","/*jshint expr:false */","};","","/**"," * Private function that creates the promises for all promise-events"," *"," * @method _createPromise"," * @param type {String} Method to create a promise for"," * @param options {Object} options to be send with the event"," * @private"," * @since 0.3","*/","YModelList.prototype._createPromise = function(type, options) {","    var instance = this,","        promise, promiseResolve, promiseReject, extraOptions;","","    promise = new Y.Promise(function (resolve, reject) {","        promiseResolve = resolve;","        promiseReject = reject;","    });","    // we pass the promise, together with the resolve and reject handlers as an option to the event.","    // this way we can fullfill the promise in the defaultFn or prevDefaultFn.","    extraOptions = {","        promise: promise,","        promiseResolve: promiseResolve,","        promiseReject: promiseReject,","        response: '', // making available at the after listener","        parsed: {}, // making available at the after listener","        options: Y.merge(options) // making passing only optins to other events possible","    };","/*jshint expr:true */","    (typeof options==='object') && YObject.each(","        options,","        function(value, key) {","            extraOptions[key] = value;","        }","    );","    // lazy publish the event","    instance[PUBLISHED+type] || (instance[PUBLISHED+type]=instance._publishAsync(type,","                                                                                {","                                                                                  defaultTargetOnly: true,","                                                                                  emitFacade: true,","                                                                                  broadcast: 1,","                                                                                  defaultFn: instance[DEFFN+type],","                                                                                  preventedFn: instance._prevDefFn","                                                                                }","                                                                               ));","/*jshint expr:false */","    instance.fire(type, extraOptions);","    return promise;","};","","/**"," * Destroys all models within this modellist."," * <b>Caution:</b> The current version uses the Model's synclayer, NOT ModelList's synclayer."," *"," * This method delegates to the Model's`sync()` method to perform the actual destroy"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful destroy operation will fire an `error` event with the `src` value \"destroy\"."," *"," * @method _defFn_destroymodels"," * @private"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+DESTROYMODELS] = function(e) {","    var instance = this,","        destroylist = [],","        options = e.options;","","    instance.each(","        function(model) {","            destroylist.push(model.destroyPromise(options));","        }","    );","    Y.batch.apply(Y, destroylist).then(","//            Y.Promise.every(destroylist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be retained: new will be added.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'readappend' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"loadappend\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_loadappend"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","","/**"," * Loads models from the server and adds them into the ModelList.<br />"," * Previous items will be replaced. Use loadappendPromise to append the items.<br /><br />"," *"," * This method delegates to the `sync()` method, by using the 'read' action."," * This is an asynchronous action. You <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful load operation will fire an `error` event with the `src` value \"load\"."," *"," * If the load operation succeeds and one or more of the loaded attributes"," * differ from this model's current attributes, a `change` event will be fired for every Model."," *"," * @method _defFn_load"," * @param {Object} [options] Options to be passed to `sync()`. The custom sync"," *                 implementation can determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YArray.each(","    [LOAD, LOADAPPEND],","    function(eventType) {","        YModelList.prototype[DEFFN+eventType] = function (e) {","            var instance = this,","                readsync = (eventType===LOADAPPEND) ? READAPPEND : READ,","                options = e.options,","                errFunc, successFunc;","","            errFunc = function(err) {","                var facade = {","                    options: options,","                    error: err,","                    src: eventType","                };","                instance._lazyFireErrorEvent(facade);","                e.promiseReject(new Error(err));","            };","            successFunc = function(response) {","                var parsed;","                e.response = response;","                parsed = PARSED(response);","                if (parsed.responseText) {","                    // XMLHttpRequest","                    parsed = parsed.responseText;","                }","                e.parsed = parsed;","                //options.append is for compatiblility with previous versions","                // where you could call: loadPromise({append: true});","                if ((eventType===LOADAPPEND) || options.append) {","                    instance.add(parsed, options);","                }","                else {","                    instance.reset(parsed, options);","                }","                e.promiseResolve(response);","            };","            if (instance.syncPromise) {","                // use the syncPromise-layer","                instance._syncTimeoutPromise(readsync, options).then(","                    successFunc,","                    errFunc","                );","            }","            else {","                instance.sync(readsync, options, function (err, response) {","                    if (err) {","                        errFunc(err);","                    }","                    else {","                        successFunc(response);","                    }","                });","            }","            return e.promise;","        };","    }",");","","/**"," * Saves all modified models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all modified Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual save"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful save operation will fire an `error` event with the `src` value \"save\"."," *"," * If the save operation succeeds and one or more of the attributes returned in"," * the server's response differ from this model's current attributes, a"," * `change` event will be fired."," *"," * @method _defFn_save"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SAVE] = function(e) {","    var instance = this,","        savelist = [],","        options = e.options;","    instance.each(","        function(model) {","            if (model.isModified()) {","                savelist.push(model.savePromise(options));","            }","        }","    );","    Y.batch.apply(Y, savelist).then(","//            Y.Promise.every(savelist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Submits all models within this modellist to the server."," * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer."," * Therefore, you get multiple requests for all Models."," *"," * This method delegates to the Model's`sync()` method to perform the actual submit"," * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to"," * make the promise work."," *"," * An unsuccessful submit operation will fire an `error` event with the `src` value \"submit\"."," *"," * @method _defFn_submit"," * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync"," *                 implementation to determine what options it supports or requires, if any."," * @private"," * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","**/","YModelList.prototype[DEFFN+SUBMIT] = function(e) {","    var instance = this,","        submitlist = [],","        options = e.options;","","    instance.each(","        function(model) {","/*jshint expr:true */","            model.submitPromise && submitlist.push(model.submitPromise(options));","/*jshint expr:false */","        }","    );","    Y.batch.apply(Y, submitlist).then(","//            Y.Promise.every(submitlist).then(","        function(response) {","            e.promiseResolve(response);","        },","        function(err) {","            e.promiseReject(new Error(err));","        }","    );","    return e.promise;","};","","/**"," * Fires the ERROR-event and -if not published yet- publish it broadcasted to Y."," * Because the error-event is broadcasted to Y, it can be catched by gallery-itsaerrorreporter."," *"," * @method _lazyFireErrorEvent"," * @param {Object} [facade] eventfacade."," * @private","**/","YModelList.prototype._lazyFireErrorEvent = function(facade) {","    var instance = this;","","    // lazy publish","    if (!instance._errorEvent) {","        instance._errorEvent = instance.publish(ERROR, {","            broadcast: 1","        });","    }","    instance.fire(ERROR, facade);","};","","/**","   * Hack with the help of Luke Smith: https://gist.github.com/lsmith/6664382/d688740bb91f9ecfc3c89456a82f30d35c5095cb","   * Variant of publish(), but works with asynchronious defaultFn and preventedFn.","   *","   * Creates a new custom event of the specified type.  If a custom event","   * by that name already exists, it will not be re-created.  In either","   * case the custom event is returned.","   *","   * @method _publishAsync","   *","   * @param type {String} the type, or name of the event","   * @param opts {object} optional config params.  Valid properties are:","   *","   *  <ul>","   *    <li>","   *   'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)","   *    </li>","   *    <li>","   *   'bubbles': whether or not this event bubbles (true)","   *              Events can only bubble if emitFacade is true.","   *    </li>","   *    <li>","   *   'context': the default execution context for the listeners (this)","   *    </li>","   *    <li>","   *   'defaultFn': the default function to execute when this event fires if preventDefault was not called","   *    </li>","   *    <li>","   *   'emitFacade': whether or not this event emits a facade (false)","   *    </li>","   *    <li>","   *   'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'","   *    </li>","   *    <li>","   *   'fireOnce': if an event is configured to fire once, new subscribers after","   *   the fire will be notified immediately.","   *    </li>","   *    <li>","   *   'async': fireOnce event listeners will fire synchronously if the event has already","   *    fired unless async is true.","   *    </li>","   *    <li>","   *   'preventable': whether or not preventDefault() has an effect (true)","   *    </li>","   *    <li>","   *   'preventedFn': a function that is executed when preventDefault is called","   *    </li>","   *    <li>","   *   'queuable': whether or not this event can be queued during bubbling (false)","   *    </li>","   *    <li>","   *   'silent': if silent is true, debug messages are not provided for this event.","   *    </li>","   *    <li>","   *   'stoppedFn': a function that is executed when stopPropagation is called","   *    </li>","   *","   *    <li>","   *   'monitored': specifies whether or not this event should send notifications about","   *   when the event has been attached, detached, or published.","   *    </li>","   *    <li>","   *   'type': the event type (valid option if not provided as the first parameter to publish)","   *    </li>","   *  </ul>","   *","   *  @private","   *  @return {CustomEvent} the custom event","   *","  **/","YModelList.prototype._publishAsync = function(type, opts) {","    var instance = this,","        asyncEvent = instance.publish(type, opts);","","/*jshint expr:true */","    opts && (opts.broadcast===1) && instance.addTarget(Y);","    opts && (opts.broadcast===2) && instance.addTarget(YUI);","/*jshint expr:false */","    asyncEvent._firing = new Y.Promise(function (resolve) { resolve(); });","","    asyncEvent.fire = function (data) {","        var args  = Y.Array(arguments, 0, true),","            stack, next;","","        asyncEvent._firing = asyncEvent._firing.then(function () {","            stack = {","                id: asyncEvent.id,","                next: asyncEvent,","                silent: asyncEvent.silent,","                stopped: 0,","                prevented: 0,","                bubbling: null,","                type: asyncEvent.type,","                defaultTargetOnly: asyncEvent.defaultTargetOnly","            };","            asyncEvent.details = args;","            // Execute on() subscribers","            var subs = asyncEvent._subscribers,","                args2 = [],","                e, i, len;","","                args2.push.apply(args2, data);","                e = asyncEvent._createFacade(args2);","","            e.target = e.target || instance;","            if (subs) {","                for (i = 0, len = subs.length; i < len; ++i) {","                    try {","                        subs[i].fn.call(subs[i].context, e);","                    }","                    catch (catchErr) {","                    }","                }","            }","            // Execute on() subscribers for each bubble target and their respective targets:","            if (asyncEvent.bubbles && !asyncEvent.stopped) {","                instance.bubble(asyncEvent, args, null, stack);","                e.prevented = Math.max(e.prevented, stack.prevented);","            }","","            // Resolve the _firing promise with either prefentedFn promise if it was prevented, or with a promise for","            // the result of the defaultFn followed by the execution of the after subs.","            return e.prevented ?","                asyncEvent.preventedFn.call(instance, e).then(null, function (reason) {","                    return false;","                }) :","                asyncEvent.defaultFn.call(instance, e).then(function () {","                    // no need to handle 'response' it is merged into 'e' within the defaultfunction","                    // Execute after() subscribers","","                    subs = asyncEvent._afters;","                    if (subs) {","                        for (i = 0, len = subs.length; i < len; ++i) {","                            try {","                                subs[i].fn.call(subs[i].context, e);","                            }","                            catch (catchErr) {","                            }","                        }","                    }","                    // Execute after() subscribers for each bubble target and their respective targets:","                    if (stack.afterQueue) {","                        while ((next = stack.afterQueue.last())) {","                            next();","                        }","                    }","","                // Catch errors/preventions and reset the promise state to fulfilled for","                // the next call to fire();","                }).then(null, function (reason) {","                    return false;","                });","        },","        function(reason) {","            var facade = {","                error   : (reason && (reason.message || reason)),","                src     : 'ModelList._publishAsync()'","            };","            instance._lazyFireErrorEvent(facade);","        });","    };","","    asyncEvent._fire = function (args) {","        return asyncEvent.fire(args[0]);","    };","    return asyncEvent;","};","","/**"," * Prevented defaultFn as a Promise. Makes internal e.promise to be rejected."," *"," * @method _prevDefFn"," * @param e {EventTarget}"," * @param e.promise {Y.Promise} promise passed by with the eventobject"," * @param e.promiseReject {Function} handle to the reject-method"," * @param e.promiseResolve {Function} handle to the resolve-method"," * @private"," * @since 0.3","*/","YModelList.prototype._prevDefFn = function(e) {","    e.promiseReject(new Error('preventDefaulted'));","};","","/**"," * This method is used internally and returns syncPromise() that is called with 'action'."," * If 'action' is not handled as a Promise -inside syncPromise- then this method will reject the promisi."," *"," * @method _syncTimeoutPromise"," * @param action {String} The sync-action to perform."," * @param [options] {Object} Sync options. The custom synclayer should pass through all options-properties to the server."," * @return {Y.Promise} returned response for each 'action' --> response --> resolve(dataobject) OR reject(reason)."," * The returned 'dataobject' might be an object or a string that can be turned into a json-object"," * @private"," * @since 0.2","*/","YModelList.prototype._syncTimeoutPromise = function(action, options) {","    var instance = this,","          syncpromise;","","    syncpromise = instance.syncPromise(action, options);","    if (!(syncpromise instanceof Y.Promise)) {","        syncpromise = new Y.Promise(function (resolve, reject) {","            var errormessage = 'syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';","            reject(new Error(errormessage));","        });","    }","    return syncpromise;","};","","// for backwards compatibility:","YModelList.prototype.destroyPromise = YModelList.prototype.destroyModelPromise;","","}, '@VERSION@', {","    \"requires\": [","        \"yui-base\",","        \"base-base\",","        \"base-build\",","        \"node-base\",","        \"json-parse\",","        \"promise\",","        \"model\",","        \"model-list\",","        \"gallery-itsamodelsyncpromise\",","        \"gallery-itsamodulesloadedpromise\"","    ]","});","","}());"]};
}
var __cov_3GKoR$ZYrmGv8l73dddnpQ = __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'];
__cov_3GKoR$ZYrmGv8l73dddnpQ.s['1']++;YUI.add('gallery-itsamodellistsyncpromise',function(Y,NAME){'use strict';__cov_3GKoR$ZYrmGv8l73dddnpQ.f['1']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['2']++;var YModelList=Y.ModelList,YArray=Y.Array,YObject=Y.Object,PUBLISHED='_published',READ='read',APPEND='append',DELETE='delete',READAPPEND=READ+APPEND,MODELSYNC='modelsync',DEFFN='_defFn_',ERROR='error',SAVE='save',SUBMIT='submit',LOAD='load',LOADAPPEND=LOAD+APPEND,DESTROY='destroy',DESTROYMODELS=DESTROY+'models',PROMISE='Promise',PARSED=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['2']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['3']++;if(typeof response==='string'){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['4']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['5']++;return Y.JSON.parse(response);}catch(ex){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['6']++;this.fire(ERROR,{error:ex,response:response,src:'parse'});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['7']++;return{};}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['8']++;return(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][0]++,response)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][1]++,{});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['9']++;YModelList.prototype.addMessageTarget=function(itsamessageviewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['3']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['10']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['11']++;Y.usePromise('gallery-itsamessagecontroller','gallery-itsamessageviewer').then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['4']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['12']++;return Y.ITSAMessageController.isReady();}).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['5']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['13']++;if(itsamessageviewer instanceof Y.ITSAMessageViewer){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['14']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][1]++,instance.removeMessageTarget());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['15']++;instance._itsamessageListener=instance.on([LOAD,SUBMIT,SAVE,DESTROY],function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['6']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['16']++;var options=e.options,remove=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][0]++,options.remove)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][1]++,options[DELETE]),type=e.type,typesplit=type.split(':'),subtype=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][0]++,typesplit[1])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][1]++,typesplit[0]),statushandle;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['17']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][0]++,subtype!==DESTROY)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][1]++,remove)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['18']++;statushandle=itsamessageviewer.showStatus((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][0]++,e.statusmessage)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][1]++,Y.ITSAMessageController._syncMessage[subtype]),{source:MODELSYNC});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['19']++;e.promise.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['7']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['20']++;itsamessageviewer.removeStatus(statushandle);},function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['8']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['21']++;itsamessageviewer.removeStatus(statushandle);});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['22']++;instance._itsamessagedestroylistener1=instance.onceAfter(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['9']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['23']++;instance._itsamessageListener.detach();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['24']++;instance._itsamessagedestroylistener2=itsamessageviewer.once(DESTROY,function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['10']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['25']++;instance._itsamessageListener.detach();});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][1]++;}});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['26']++;YArray.each([LOAD,LOADAPPEND,SAVE,SUBMIT,DESTROYMODELS],function(Fn){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['11']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['27']++;YModelList.prototype[Fn]=function(options,callback){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['12']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['28']++;var instance=this,promise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['29']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][0]++,promise=instance[Fn+PROMISE](options))&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][1]++,callback)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][2]++,promise.then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['13']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['30']++;callback(null,response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['14']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['31']++;callback(err);}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['32']++;return instance;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['33']++;YModelList.prototype[Fn+PROMISE]=function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['15']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['34']++;return this._createPromise(Fn,options);};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['35']++;YModelList.prototype.removeMessageTarget=function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['16']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['36']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['37']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][0]++,instance._itsamessageListener)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][1]++,instance._itsamessageListener.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['38']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][0]++,instance._itsamessagedestroylistener1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][1]++,instance._itsamessagedestroylistener1.detach());__cov_3GKoR$ZYrmGv8l73dddnpQ.s['39']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][0]++,instance._itsamessagedestroylistener2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['13'][1]++,instance._itsamessagedestroylistener2.detach());};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['40']++;YModelList.prototype._createPromise=function(type,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['17']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['41']++;var instance=this,promise,promiseResolve,promiseReject,extraOptions;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['42']++;promise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['18']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['43']++;promiseResolve=resolve;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['44']++;promiseReject=reject;});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['45']++;extraOptions={promise:promise,promiseResolve:promiseResolve,promiseReject:promiseReject,response:'',parsed:{},options:Y.merge(options)};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['46']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][0]++,typeof options==='object')&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['14'][1]++,YObject.each(options,function(value,key){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['19']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['47']++;extraOptions[key]=value;}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['48']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][0]++,instance[PUBLISHED+type])||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['15'][1]++,instance[PUBLISHED+type]=instance._publishAsync(type,{defaultTargetOnly:true,emitFacade:true,broadcast:1,defaultFn:instance[DEFFN+type],preventedFn:instance._prevDefFn}));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['49']++;instance.fire(type,extraOptions);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['50']++;return promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['51']++;YModelList.prototype[DEFFN+DESTROYMODELS]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['20']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['52']++;var instance=this,destroylist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['53']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['21']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['54']++;destroylist.push(model.destroyPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['55']++;Y.batch.apply(Y,destroylist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['22']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['56']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['23']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['57']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['58']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['59']++;YArray.each([LOAD,LOADAPPEND],function(eventType){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['24']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['60']++;YModelList.prototype[DEFFN+eventType]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['25']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['61']++;var instance=this,readsync=eventType===LOADAPPEND?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][0]++,READAPPEND):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['16'][1]++,READ),options=e.options,errFunc,successFunc;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['62']++;errFunc=function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['26']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['63']++;var facade={options:options,error:err,src:eventType};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['64']++;instance._lazyFireErrorEvent(facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['65']++;e.promiseReject(new Error(err));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['66']++;successFunc=function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['27']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['67']++;var parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['68']++;e.response=response;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['69']++;parsed=PARSED(response);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['70']++;if(parsed.responseText){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['71']++;parsed=parsed.responseText;}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['17'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['72']++;e.parsed=parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['73']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][0]++,eventType===LOADAPPEND)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['19'][1]++,options.append)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['74']++;instance.add(parsed,options);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['18'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['75']++;instance.reset(parsed,options);}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['76']++;e.promiseResolve(response);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['77']++;if(instance.syncPromise){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['78']++;instance._syncTimeoutPromise(readsync,options).then(successFunc,errFunc);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['20'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['79']++;instance.sync(readsync,options,function(err,response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['28']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['80']++;if(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['81']++;errFunc(err);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['21'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['82']++;successFunc(response);}});}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['83']++;return e.promise;};});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['84']++;YModelList.prototype[DEFFN+SAVE]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['29']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['85']++;var instance=this,savelist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['86']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['30']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['87']++;if(model.isModified()){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['88']++;savelist.push(model.savePromise(options));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['22'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['89']++;Y.batch.apply(Y,savelist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['31']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['90']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['32']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['91']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['92']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['93']++;YModelList.prototype[DEFFN+SUBMIT]=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['33']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['94']++;var instance=this,submitlist=[],options=e.options;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['95']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['34']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['96']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][0]++,model.submitPromise)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['23'][1]++,submitlist.push(model.submitPromise(options)));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['97']++;Y.batch.apply(Y,submitlist).then(function(response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['35']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['98']++;e.promiseResolve(response);},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['36']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['99']++;e.promiseReject(new Error(err));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['100']++;return e.promise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['101']++;YModelList.prototype._lazyFireErrorEvent=function(facade){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['37']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['102']++;var instance=this;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['103']++;if(!instance._errorEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['104']++;instance._errorEvent=instance.publish(ERROR,{broadcast:1});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['24'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['105']++;instance.fire(ERROR,facade);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['106']++;YModelList.prototype._publishAsync=function(type,opts){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['38']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['107']++;var instance=this,asyncEvent=instance.publish(type,opts);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['108']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][1]++,opts.broadcast===1)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['25'][2]++,instance.addTarget(Y));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['109']++;(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][0]++,opts)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][1]++,opts.broadcast===2)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['26'][2]++,instance.addTarget(YUI));__cov_3GKoR$ZYrmGv8l73dddnpQ.s['110']++;asyncEvent._firing=new Y.Promise(function(resolve){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['39']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['111']++;resolve();});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['112']++;asyncEvent.fire=function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['40']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['113']++;var args=Y.Array(arguments,0,true),stack,next;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['114']++;asyncEvent._firing=asyncEvent._firing.then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['41']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['115']++;stack={id:asyncEvent.id,next:asyncEvent,silent:asyncEvent.silent,stopped:0,prevented:0,bubbling:null,type:asyncEvent.type,defaultTargetOnly:asyncEvent.defaultTargetOnly};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['116']++;asyncEvent.details=args;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['117']++;var subs=asyncEvent._subscribers,args2=[],e,i,len;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['118']++;args2.push.apply(args2,data);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['119']++;e=asyncEvent._createFacade(args2);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['120']++;e.target=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][0]++,e.target)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['27'][1]++,instance);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['121']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['122']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['123']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['124']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['28'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['125']++;if((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][0]++,asyncEvent.bubbles)&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['30'][1]++,!asyncEvent.stopped)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['126']++;instance.bubble(asyncEvent,args,null,stack);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['127']++;e.prevented=Math.max(e.prevented,stack.prevented);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['29'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['128']++;return e.prevented?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][0]++,asyncEvent.preventedFn.call(instance,e).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['42']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['129']++;return false;})):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['31'][1]++,asyncEvent.defaultFn.call(instance,e).then(function(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['43']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['130']++;subs=asyncEvent._afters;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['131']++;if(subs){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['132']++;for(i=0,len=subs.length;i<len;++i){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['133']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['134']++;subs[i].fn.call(subs[i].context,e);}catch(catchErr){}}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['32'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['135']++;if(stack.afterQueue){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['136']++;while(next=stack.afterQueue.last()){__cov_3GKoR$ZYrmGv8l73dddnpQ.s['137']++;next();}}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['33'][1]++;}}).then(null,function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['44']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['138']++;return false;}));},function(reason){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['45']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['139']++;var facade={error:(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][0]++,reason)&&((__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][1]++,reason.message)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['34'][2]++,reason)),src:'ModelList._publishAsync()'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['140']++;instance._lazyFireErrorEvent(facade);});};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['141']++;asyncEvent._fire=function(args){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['46']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['142']++;return asyncEvent.fire(args[0]);};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['143']++;return asyncEvent;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['144']++;YModelList.prototype._prevDefFn=function(e){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['47']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['145']++;e.promiseReject(new Error('preventDefaulted'));};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['146']++;YModelList.prototype._syncTimeoutPromise=function(action,options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['48']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['147']++;var instance=this,syncpromise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['148']++;syncpromise=instance.syncPromise(action,options);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['149']++;if(!(syncpromise instanceof Y.Promise)){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['150']++;syncpromise=new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['49']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['151']++;var errormessage='syncPromise is rejected --> '+action+' not defined as a Promise inside syncPromise()';__cov_3GKoR$ZYrmGv8l73dddnpQ.s['152']++;reject(new Error(errormessage));});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['35'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['153']++;return syncpromise;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['154']++;YModelList.prototype.destroyPromise=YModelList.prototype.destroyModelPromise;},'@VERSION@',{'requires':['yui-base','base-base','base-build','node-base','json-parse','promise','model','model-list','gallery-itsamodelsyncpromise','gallery-itsamodulesloadedpromise']});
