if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamessageviewer/gallery-itsamessageviewer.js']) {
   __coverage__['build/gallery-itsamessageviewer/gallery-itsamessageviewer.js'] = {"path":"build/gallery-itsamessageviewer/gallery-itsamessageviewer.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0,0,0,0,0,0],"9":[0,0],"10":[0,0,0],"11":[0,0,0,0,0,0,0],"12":[0,0],"13":[0,0,0,0,0,0],"14":[0,0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0,0,0],"26":[0,0,0,0,0],"27":[0,0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":37},"end":{"line":1,"column":56}}},"2":{"name":"ITSAMessageViewer","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":29}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":42},"end":{"line":76,"column":53}}},"4":{"name":"(anonymous_4)","line":111,"loc":{"start":{"line":111,"column":42},"end":{"line":111,"column":58}}},"5":{"name":"(anonymous_5)","line":126,"loc":{"start":{"line":126,"column":40},"end":{"line":126,"column":68}}},"6":{"name":"(anonymous_6)","line":138,"loc":{"start":{"line":138,"column":38},"end":{"line":138,"column":66}}},"7":{"name":"(anonymous_7)","line":152,"loc":{"start":{"line":152,"column":42},"end":{"line":152,"column":70}}},"8":{"name":"(anonymous_8)","line":162,"loc":{"start":{"line":162,"column":41},"end":{"line":162,"column":52}}},"9":{"name":"(anonymous_9)","line":179,"loc":{"start":{"line":179,"column":50},"end":{"line":179,"column":66}}},"10":{"name":"(anonymous_10)","line":183,"loc":{"start":{"line":183,"column":8},"end":{"line":183,"column":19}}},"11":{"name":"(anonymous_11)","line":186,"loc":{"start":{"line":186,"column":44},"end":{"line":186,"column":63}}},"12":{"name":"(anonymous_12)","line":187,"loc":{"start":{"line":187,"column":59},"end":{"line":187,"column":70}}},"13":{"name":"(anonymous_13)","line":196,"loc":{"start":{"line":196,"column":8},"end":{"line":196,"column":19}}},"14":{"name":"(anonymous_14)","line":197,"loc":{"start":{"line":197,"column":33},"end":{"line":197,"column":60}}},"15":{"name":"(anonymous_15)","line":208,"loc":{"start":{"line":208,"column":20},"end":{"line":208,"column":42}}},"16":{"name":"(anonymous_16)","line":218,"loc":{"start":{"line":218,"column":20},"end":{"line":218,"column":42}}},"17":{"name":"(anonymous_17)","line":257,"loc":{"start":{"line":257,"column":46},"end":{"line":257,"column":58}}},"18":{"name":"(anonymous_18)","line":291,"loc":{"start":{"line":291,"column":44},"end":{"line":291,"column":60}}},"19":{"name":"(anonymous_19)","line":294,"loc":{"start":{"line":294,"column":20},"end":{"line":294,"column":31}}},"20":{"name":"(anonymous_20)","line":296,"loc":{"start":{"line":296,"column":12},"end":{"line":296,"column":34}}},"21":{"name":"(anonymous_21)","line":305,"loc":{"start":{"line":305,"column":12},"end":{"line":305,"column":26}}},"22":{"name":"(anonymous_22)","line":311,"loc":{"start":{"line":311,"column":24},"end":{"line":311,"column":35}}},"23":{"name":"(anonymous_23)","line":326,"loc":{"start":{"line":326,"column":41},"end":{"line":326,"column":63}}},"24":{"name":"(anonymous_24)","line":347,"loc":{"start":{"line":347,"column":39},"end":{"line":347,"column":61}}},"25":{"name":"(anonymous_25)","line":364,"loc":{"start":{"line":364,"column":43},"end":{"line":364,"column":65}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":759,"column":3}},"2":{"start":{"line":23,"column":0},"end":{"line":60,"column":6}},"3":{"start":{"line":62,"column":0},"end":{"line":64,"column":1}},"4":{"start":{"line":63,"column":4},"end":{"line":63,"column":68}},"5":{"start":{"line":66,"column":0},"end":{"line":66,"column":45}},"6":{"start":{"line":68,"column":0},"end":{"line":68,"column":36}},"7":{"start":{"line":76,"column":0},"end":{"line":101,"column":2}},"8":{"start":{"line":77,"column":4},"end":{"line":77,"column":24}},"9":{"start":{"line":85,"column":4},"end":{"line":85,"column":36}},"10":{"start":{"line":94,"column":4},"end":{"line":94,"column":31}},"11":{"start":{"line":95,"column":4},"end":{"line":95,"column":48}},"12":{"start":{"line":97,"column":4},"end":{"line":97,"column":126}},"13":{"start":{"line":98,"column":4},"end":{"line":98,"column":33}},"14":{"start":{"line":99,"column":4},"end":{"line":99,"column":33}},"15":{"start":{"line":100,"column":4},"end":{"line":100,"column":34}},"16":{"start":{"line":111,"column":0},"end":{"line":116,"column":2}},"17":{"start":{"line":113,"column":4},"end":{"line":113,"column":95}},"18":{"start":{"line":114,"column":0},"end":{"line":114,"column":35}},"19":{"start":{"line":126,"column":0},"end":{"line":128,"column":2}},"20":{"start":{"line":138,"column":0},"end":{"line":140,"column":2}},"21":{"start":{"line":152,"column":0},"end":{"line":154,"column":2}},"22":{"start":{"line":162,"column":0},"end":{"line":166,"column":2}},"23":{"start":{"line":163,"column":4},"end":{"line":163,"column":24}},"24":{"start":{"line":164,"column":4},"end":{"line":164,"column":51}},"25":{"start":{"line":165,"column":4},"end":{"line":165,"column":31}},"26":{"start":{"line":179,"column":0},"end":{"line":280,"column":2}},"27":{"start":{"line":180,"column":4},"end":{"line":181,"column":52}},"28":{"start":{"line":182,"column":4},"end":{"line":279,"column":6}},"29":{"start":{"line":185,"column":12},"end":{"line":185,"column":129}},"30":{"start":{"line":186,"column":12},"end":{"line":193,"column":15}},"31":{"start":{"line":187,"column":16},"end":{"line":192,"column":19}},"32":{"start":{"line":188,"column":20},"end":{"line":188,"column":114}},"33":{"start":{"line":190,"column":20},"end":{"line":190,"column":62}},"34":{"start":{"line":197,"column":12},"end":{"line":277,"column":15}},"35":{"start":{"line":198,"column":16},"end":{"line":201,"column":90}},"36":{"start":{"line":203,"column":16},"end":{"line":203,"column":52}},"37":{"start":{"line":206,"column":16},"end":{"line":213,"column":18}},"38":{"start":{"line":209,"column":24},"end":{"line":209,"column":111}},"39":{"start":{"line":210,"column":24},"end":{"line":210,"column":209}},"40":{"start":{"line":211,"column":24},"end":{"line":211,"column":43}},"41":{"start":{"line":216,"column":16},"end":{"line":223,"column":18}},"42":{"start":{"line":219,"column":24},"end":{"line":219,"column":111}},"43":{"start":{"line":220,"column":24},"end":{"line":220,"column":210}},"44":{"start":{"line":221,"column":24},"end":{"line":221,"column":43}},"45":{"start":{"line":225,"column":16},"end":{"line":276,"column":17}},"46":{"start":{"line":226,"column":20},"end":{"line":226,"column":63}},"47":{"start":{"line":230,"column":20},"end":{"line":231,"column":100}},"48":{"start":{"line":233,"column":20},"end":{"line":234,"column":61}},"49":{"start":{"line":236,"column":20},"end":{"line":236,"column":41}},"50":{"start":{"line":242,"column":20},"end":{"line":247,"column":21}},"51":{"start":{"line":243,"column":24},"end":{"line":243,"column":103}},"52":{"start":{"line":245,"column":25},"end":{"line":247,"column":21}},"53":{"start":{"line":246,"column":24},"end":{"line":246,"column":72}},"54":{"start":{"line":248,"column":20},"end":{"line":251,"column":21}},"55":{"start":{"line":249,"column":24},"end":{"line":249,"column":61}},"56":{"start":{"line":250,"column":24},"end":{"line":250,"column":63}},"57":{"start":{"line":252,"column":20},"end":{"line":252,"column":56}},"58":{"start":{"line":254,"column":20},"end":{"line":254,"column":68}},"59":{"start":{"line":256,"column":20},"end":{"line":256,"column":71}},"60":{"start":{"line":257,"column":20},"end":{"line":275,"column":23}},"61":{"start":{"line":258,"column":24},"end":{"line":259,"column":115}},"62":{"start":{"line":260,"column":24},"end":{"line":274,"column":25}},"63":{"start":{"line":261,"column":28},"end":{"line":261,"column":46}},"64":{"start":{"line":262,"column":28},"end":{"line":262,"column":53}},"65":{"start":{"line":263,"column":28},"end":{"line":263,"column":71}},"66":{"start":{"line":267,"column":28},"end":{"line":268,"column":108}},"67":{"start":{"line":270,"column":28},"end":{"line":271,"column":69}},"68":{"start":{"line":273,"column":28},"end":{"line":273,"column":49}},"69":{"start":{"line":291,"column":0},"end":{"line":316,"column":2}},"70":{"start":{"line":292,"column":4},"end":{"line":293,"column":41}},"71":{"start":{"line":294,"column":4},"end":{"line":310,"column":6}},"72":{"start":{"line":295,"column":8},"end":{"line":309,"column":10}},"73":{"start":{"line":297,"column":16},"end":{"line":297,"column":47}},"74":{"start":{"line":299,"column":16},"end":{"line":299,"column":105}},"75":{"start":{"line":301,"column":16},"end":{"line":301,"column":57}},"76":{"start":{"line":311,"column":4},"end":{"line":314,"column":6}},"77":{"start":{"line":313,"column":8},"end":{"line":313,"column":101}},"78":{"start":{"line":315,"column":4},"end":{"line":315,"column":24}},"79":{"start":{"line":326,"column":0},"end":{"line":337,"column":2}},"80":{"start":{"line":327,"column":4},"end":{"line":327,"column":24}},"81":{"start":{"line":329,"column":4},"end":{"line":336,"column":5}},"82":{"start":{"line":331,"column":8},"end":{"line":331,"column":97}},"83":{"start":{"line":334,"column":8},"end":{"line":334,"column":51}},"84":{"start":{"line":335,"column":8},"end":{"line":335,"column":40}},"85":{"start":{"line":347,"column":0},"end":{"line":353,"column":2}},"86":{"start":{"line":348,"column":4},"end":{"line":348,"column":24}},"87":{"start":{"line":350,"column":4},"end":{"line":350,"column":92}},"88":{"start":{"line":352,"column":4},"end":{"line":352,"column":34}},"89":{"start":{"line":364,"column":0},"end":{"line":368,"column":2}},"90":{"start":{"line":366,"column":4},"end":{"line":366,"column":47}},"91":{"start":{"line":367,"column":4},"end":{"line":367,"column":41}},"92":{"start":{"line":370,"column":0},"end":{"line":370,"column":40}},"93":{"start":{"line":401,"column":0},"end":{"line":401,"column":132}},"94":{"start":{"line":455,"column":0},"end":{"line":455,"column":132}},"95":{"start":{"line":487,"column":0},"end":{"line":487,"column":102}},"96":{"start":{"line":519,"column":0},"end":{"line":519,"column":106}},"97":{"start":{"line":585,"column":0},"end":{"line":585,"column":117}},"98":{"start":{"line":617,"column":0},"end":{"line":617,"column":108}},"99":{"start":{"line":643,"column":0},"end":{"line":643,"column":112}},"100":{"start":{"line":695,"column":0},"end":{"line":695,"column":122}},"101":{"start":{"line":721,"column":0},"end":{"line":721,"column":108}},"102":{"start":{"line":748,"column":0},"end":{"line":748,"column":110}}},"branchMap":{"1":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":27}},{"start":{"line":113,"column":32},"end":{"line":113,"column":93}}]},"2":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":27},"end":{"line":185,"column":40}},{"start":{"line":185,"column":46},"end":{"line":185,"column":75}},{"start":{"line":185,"column":81},"end":{"line":185,"column":93}},{"start":{"line":185,"column":98},"end":{"line":185,"column":126}}]},"3":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":19},"end":{"line":186,"column":26}},{"start":{"line":186,"column":30},"end":{"line":193,"column":14}}]},"4":{"line":188,"type":"binary-expr","locations":[{"start":{"line":188,"column":31},"end":{"line":188,"column":60}},{"start":{"line":188,"column":66},"end":{"line":188,"column":78}},{"start":{"line":188,"column":83},"end":{"line":188,"column":111}}]},"5":{"line":190,"type":"binary-expr","locations":[{"start":{"line":190,"column":20},"end":{"line":190,"column":27}},{"start":{"line":190,"column":31},"end":{"line":190,"column":48}},{"start":{"line":190,"column":52},"end":{"line":190,"column":61}}]},"6":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":39}},{"start":{"line":203,"column":43},"end":{"line":203,"column":51}}]},"7":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":38},"end":{"line":209,"column":64}},{"start":{"line":209,"column":70},"end":{"line":209,"column":90}},{"start":{"line":209,"column":94},"end":{"line":209,"column":109}}]},"8":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":38},"end":{"line":210,"column":48}},{"start":{"line":210,"column":53},"end":{"line":210,"column":79}},{"start":{"line":210,"column":85},"end":{"line":210,"column":109}},{"start":{"line":210,"column":113},"end":{"line":210,"column":139}},{"start":{"line":210,"column":144},"end":{"line":210,"column":165}},{"start":{"line":210,"column":169},"end":{"line":210,"column":193}},{"start":{"line":210,"column":197},"end":{"line":210,"column":208}}]},"9":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":16},"end":{"line":216,"column":27}},{"start":{"line":216,"column":31},"end":{"line":223,"column":17}}]},"10":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":38},"end":{"line":219,"column":64}},{"start":{"line":219,"column":70},"end":{"line":219,"column":90}},{"start":{"line":219,"column":94},"end":{"line":219,"column":109}}]},"11":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":38},"end":{"line":220,"column":48}},{"start":{"line":220,"column":53},"end":{"line":220,"column":79}},{"start":{"line":220,"column":85},"end":{"line":220,"column":109}},{"start":{"line":220,"column":113},"end":{"line":220,"column":139}},{"start":{"line":220,"column":144},"end":{"line":220,"column":166}},{"start":{"line":220,"column":170},"end":{"line":220,"column":194}},{"start":{"line":220,"column":198},"end":{"line":220,"column":209}}]},"12":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":16},"end":{"line":225,"column":16}},{"start":{"line":225,"column":16},"end":{"line":225,"column":16}}]},"13":{"line":230,"type":"binary-expr","locations":[{"start":{"line":230,"column":21},"end":{"line":230,"column":66}},{"start":{"line":230,"column":73},"end":{"line":230,"column":85}},{"start":{"line":230,"column":90},"end":{"line":230,"column":117}},{"start":{"line":230,"column":121},"end":{"line":230,"column":149}},{"start":{"line":231,"column":25},"end":{"line":231,"column":58}},{"start":{"line":231,"column":63},"end":{"line":231,"column":99}}]},"14":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":21},"end":{"line":233,"column":66}},{"start":{"line":233,"column":73},"end":{"line":233,"column":86}},{"start":{"line":233,"column":91},"end":{"line":233,"column":119}},{"start":{"line":233,"column":125},"end":{"line":233,"column":158}},{"start":{"line":234,"column":24},"end":{"line":234,"column":60}}]},"15":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":20},"end":{"line":242,"column":20}},{"start":{"line":242,"column":20},"end":{"line":242,"column":20}}]},"16":{"line":243,"type":"binary-expr","locations":[{"start":{"line":243,"column":44},"end":{"line":243,"column":71}},{"start":{"line":243,"column":75},"end":{"line":243,"column":102}}]},"17":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":25},"end":{"line":245,"column":25}},{"start":{"line":245,"column":25},"end":{"line":245,"column":25}}]},"18":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":30},"end":{"line":245,"column":42}},{"start":{"line":245,"column":48},"end":{"line":245,"column":77}}]},"19":{"line":248,"type":"if","locations":[{"start":{"line":248,"column":20},"end":{"line":248,"column":20}},{"start":{"line":248,"column":20},"end":{"line":248,"column":20}}]},"20":{"line":248,"type":"binary-expr","locations":[{"start":{"line":248,"column":24},"end":{"line":248,"column":41}},{"start":{"line":248,"column":45},"end":{"line":248,"column":73}}]},"21":{"line":254,"type":"binary-expr","locations":[{"start":{"line":254,"column":21},"end":{"line":254,"column":33}},{"start":{"line":254,"column":38},"end":{"line":254,"column":67}}]},"22":{"line":259,"type":"binary-expr","locations":[{"start":{"line":259,"column":42},"end":{"line":259,"column":68}},{"start":{"line":259,"column":74},"end":{"line":259,"column":94}},{"start":{"line":259,"column":98},"end":{"line":259,"column":113}}]},"23":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":24},"end":{"line":260,"column":24}},{"start":{"line":260,"column":24},"end":{"line":260,"column":24}}]},"24":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":28},"end":{"line":260,"column":38}},{"start":{"line":260,"column":43},"end":{"line":260,"column":69}}]},"25":{"line":267,"type":"binary-expr","locations":[{"start":{"line":267,"column":29},"end":{"line":267,"column":74}},{"start":{"line":267,"column":81},"end":{"line":267,"column":93}},{"start":{"line":267,"column":98},"end":{"line":267,"column":125}},{"start":{"line":267,"column":129},"end":{"line":267,"column":157}},{"start":{"line":268,"column":33},"end":{"line":268,"column":66}},{"start":{"line":268,"column":71},"end":{"line":268,"column":107}}]},"26":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":29},"end":{"line":270,"column":74}},{"start":{"line":270,"column":81},"end":{"line":270,"column":94}},{"start":{"line":270,"column":99},"end":{"line":270,"column":127}},{"start":{"line":270,"column":133},"end":{"line":270,"column":166}},{"start":{"line":271,"column":32},"end":{"line":271,"column":68}}]},"27":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":17},"end":{"line":299,"column":44}},{"start":{"line":299,"column":48},"end":{"line":299,"column":74}},{"start":{"line":299,"column":79},"end":{"line":299,"column":104}}]},"28":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":15},"end":{"line":313,"column":38}},{"start":{"line":313,"column":42},"end":{"line":313,"column":100}}]},"29":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":4},"end":{"line":329,"column":4}},{"start":{"line":329,"column":4},"end":{"line":329,"column":4}}]},"30":{"line":331,"type":"binary-expr","locations":[{"start":{"line":331,"column":9},"end":{"line":331,"column":36}},{"start":{"line":331,"column":40},"end":{"line":331,"column":66}},{"start":{"line":331,"column":71},"end":{"line":331,"column":96}}]},"31":{"line":350,"type":"binary-expr","locations":[{"start":{"line":350,"column":5},"end":{"line":350,"column":32}},{"start":{"line":350,"column":36},"end":{"line":350,"column":62}},{"start":{"line":350,"column":67},"end":{"line":350,"column":91}}]}},"code":["(function () { YUI.add('gallery-itsamessageviewer', function (Y, NAME) {","","'use strict';","","/*jshint maxlen:215 */","","/**"," *"," * Extends Y.Model by adding methods through which they can create editable form-elements, which represent and are bound to the propery-value."," * This model is for defining the UI-structure for all Model's properties and for firing model-events for"," * Y.ITSAFormModel does not rendering to the dom itself. That needs to be done by an Y.View-instance, like Y.ITSAViewModel."," *"," * @module gallery-itsamessageviewer"," * @extends Base"," * @class ITSAMessageViewer"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","var YArray = Y.Array,","    ITSAMessageControllerInstance = Y.ITSAMessageController,","    ESSAGE = 'essage',","    MESSAGE = 'm'+ESSAGE,","    MAIL = 'mail',","    LOADICONSDELAY = 5000, // for gallerycss-itsa-form","    PROCESSING = '_processing',","    ERROR = 'error',","    WARN = 'warn',","    INFO = 'info',","    LEVEL = 'level',","    TARGET = 'target',","    SUSPENDED = '_suspended',","    NEWMESSAGE = 'new'+MESSAGE,","    DESTROYED = 'destroyed',","    PRIORITY = 'priority',","    EVT_LEVELCLEAR = 'levelclear',","    TIMEOUTRESOLVE = 'timeoutResolve',","    TIMEOUTREJECT = 'timeoutReject',","    GET = 'get',","    SHOW = 'show',","    CONFIRMATION = 'Confirmation',","    GET_RETRY_CONFIRMATION = GET+'Retry'+CONFIRMATION,","    GET_CONFIRMATION = GET+CONFIRMATION,","    GET_INPUT = GET+'Input',","    GET_NUMBER = GET+'Number',","    GET_EMAIL = GET+'E'+MAIL,","    GET_URL = GET+'URL',","    SHOW_MESSAGE = SHOW+'M'+ESSAGE,","    SHOW_WARNING = SHOW+'Warning',","    SHOW_ERROR = SHOW+'Error',","    SHOW_STATUS = SHOW+'Status',","    UNDERSCORE = '_',","    AVAILABLE_LEVELS = {","        info: true,","        warn: true,","        error: true","    };","","function ITSAMessageViewer() {","    ITSAMessageViewer.superclass.constructor.apply(this, arguments);","}","","ITSAMessageViewer.NAME = 'itsamessageviewer';","","Y.extend(ITSAMessageViewer, Y.Base);","","","/**"," * @method initializer"," * @protected"," * @since 0.1","*/","ITSAMessageViewer.prototype.initializer = function() {","    var instance = this;","","    /**","     * Flag that tells whether the MessageViewer can only handle simple messages: Y.showMessage(), showWarning()/Y.alert() and Y.showError().","     * @property simpleMessages","     * @default false","     * @type Boolean","     */","    instance.simpleMessages = false;","","    /**","     * Holds the currently viewed message of all levels.","     * @property _lastMessage","     * @default {}","     * @private","     * @type Object","     */","    instance._lastMessage = {};","    Y.ITSAMessageController.addTarget(instance);","    // now loading formicons with a delay --> should anyonde need it, then is nice to have the icons already available","    Y.later(LOADICONSDELAY, Y, Y.usePromise, ['gallerycss-itsa-base', 'gallerycss-itsa-animatespin', 'gallerycss-itsa-form']);","    instance._processQueue(INFO);","    instance._processQueue(WARN);","    instance._processQueue(ERROR);","};","","/**"," * Makes this instance handle 'untargeted' messages of the specified level."," * If this.simpleMessage is set true, then only Y.showMessage, Y.showWarning, Y.alert and Y.showError messages are handled."," *"," * @method handleLevel"," * @param level {String} queue-level, should be either 'info', 'warn' or 'error'"," * @since 0.1","*/","ITSAMessageViewer.prototype.handleLevel = function(level) {","/*jshint expr:true */","    AVAILABLE_LEVELS[level] && (Y.ITSAMessageController._targets[level]=this.constructor.NAME);","console.log(this.constructor.NAME);","/*jshint expr:false */","};","","/**"," * Makes the panel-instance -that belongs to the message- show up again, after it has been suspended.<br>"," * Should be overruled by a descendant-Class."," *"," * @method resurrect"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @since 0.1","*/","ITSAMessageViewer.prototype.resurrect = function(/* itsamessage */) {","    // should be overridden --> method that renderes the message in the dom","};","","/**"," * Makes the panel-instance -that belongs to the message- to hide, in order for a mesage at a higher level to show up.<br>"," * Should be overruled by a descendant-Class."," *"," * @method suspend"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @since 0.1","*/","ITSAMessageViewer.prototype.suspend = function(/* itsamessage */) {","    // could be overridden --> method that renderes the message in the dom","};","","/**"," * Views the message<br>"," * Should be overruled by a descendant-Class.<br>"," * <b>Note:</b> Make sure to return a Promise that fulfills when the message is read! otherwise all messsages are eaten up at once."," *"," * @method viewMessage"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @return {Y.Promise} will resolve when Y.ITSAMessage._promise gets fulfilled."," * @since 0.1","*/","ITSAMessageViewer.prototype.viewMessage = function(/* itsamessage */) {","    // should be overridden --> method that renderes the message in the dom","};","","/**"," * Cleans up bindings"," * @method destructor"," * @protected"," * @since 0.1","*/","ITSAMessageViewer.prototype.destructor = function() {","    var instance = this;","    Y.ITSAMessageController.removeTarget(instance);","    instance._lastMessage = {};","};","","//--- private methods ---------------------------------------------------","","/**"," * Returns the next Y.ITSAMessage from the queue."," *"," * @method _nextMessagePromise"," * @param level {String} queue-level, should be either 'info', 'warn' or 'error'"," * @private"," * @return {Y.Promise} always returns a resolved Promise returning a Y.ITSAMessage-instance --> resolve(itsamessage)"," * @since 0.1","*/","ITSAMessageViewer.prototype._nextMessagePromise = function(level) {","    var instance = this,","        messageController = Y.ITSAMessageController;","    return messageController.isReady().then(","        function() {","            // if higher level is 'busy' then we need to wait until all those messages are cleaned up","            var proceed = (level===ERROR) || (!instance._lastMessage[ERROR] && ((level===WARN) || !instance._lastMessage[WARN]));","            return proceed || new Y.Promise(function (resolve) {","                var listener = instance.on(EVT_LEVELCLEAR, function() {","                    proceed = (!instance._lastMessage[ERROR] && ((level===WARN) || !instance._lastMessage[WARN]));","/*jshint expr:true */","                    proceed && listener.detach() && resolve();","/*jshint expr:false */","                });","            });","        }","    ).then (","        function() {","            return new Y.Promise(function (resolve, reject) {","                var queue = messageController.queue,","                    name = instance.constructor.NAME,","                    handleAnonymous = (messageController._targets[level]===name),","                    nextMessage, listener, otherLevelMessage, destroylistener, isTargeted;","/*jshint expr:true */","                instance.get(DESTROYED) && reject();","/*jshint expr:false */","                // first try to retrieve message with priority","                YArray.some(","                    queue,","                    function(itsamessage) {","                        isTargeted = (itsamessage[TARGET]===name) || (!itsamessage[TARGET] && handleAnonymous);","                        nextMessage = isTargeted && (itsamessage[LEVEL]===level) && (!instance.simpleMessages || itsamessage._simpleMessage) && itsamessage[PRIORITY] && !itsamessage[PROCESSING] && itsamessage;","                        return nextMessage;","                    }","                );","                // if no prioritymessage, then try to retrieve message without priority","/*jshint expr:true */","                nextMessage || YArray.some(","                    queue,","                    function(itsamessage) {","                        isTargeted = (itsamessage[TARGET]===name) || (!itsamessage[TARGET] && handleAnonymous);","                        nextMessage = isTargeted && (itsamessage[LEVEL]===level) && (!instance.simpleMessages || itsamessage._simpleMessage) && !itsamessage[PRIORITY] && !itsamessage[PROCESSING] && itsamessage;","                        return nextMessage;","                    }","                );","/*jshint expr:false */","                if (nextMessage) {","                    instance._lastMessage[level] = nextMessage;","                    // first: is level=warn or level=error then we might need to pauze previous levels","/*jshint expr:true */","                    // check if 'info' needs to be suspended:","                    (otherLevelMessage=instance._lastMessage[INFO]) && ((level!==INFO) || instance._lastMessage[WARN] || instance._lastMessage[ERROR]) &&","                        (otherLevelMessage[SUSPENDED]=true) && instance._suspend(otherLevelMessage);","                    // check if 'warn' needs to be suspended:","                    (otherLevelMessage=instance._lastMessage[WARN]) && ((level===ERROR) || instance._lastMessage[ERROR]) && (otherLevelMessage[SUSPENDED]=true) &&","                        instance._suspend(otherLevelMessage);","/*jshint expr:false */","                    resolve(nextMessage);","                }","                else {","                    // No message in the queue: wait for new messages to be added.","                    // first: is level=warn or level=error then we might need to reactivate previous levels","/*jshint expr:true */","                    if (level===ERROR) {","                        otherLevelMessage = instance._lastMessage[WARN] || instance._lastMessage[INFO];","                    }","                    else if ((level===WARN) && (!instance._lastMessage[ERROR])) {","                        otherLevelMessage = instance._lastMessage[INFO];","                    }","                    if (otherLevelMessage && otherLevelMessage[SUSPENDED]) {","                        otherLevelMessage[SUSPENDED] = false;","                        instance._resurrect(otherLevelMessage);","                    }","                    instance._lastMessage[level] = null;","                    // fire the levelclear-event to make 'waiting at other levels' at the first promise of _nextMessagePromise resolve:","                    (level!==INFO) && instance.fire(EVT_LEVELCLEAR);","/*jshint expr:false */","                    destroylistener = instance.once('destroy', reject);","                    listener=Y.on(NEWMESSAGE, function(e) {","                        var itsamessage = e.itsamessage,","                            isTargeted = (itsamessage[TARGET]===name) || (!itsamessage[TARGET] && handleAnonymous);","                        if (isTargeted && (itsamessage[LEVEL]===level)) {","                            listener.detach();","                            destroylistener.detach();","                            instance._lastMessage[level] = itsamessage;","                    // next: is level=warn or level=error then we might need to pauze previous levels","/*jshint expr:true */","                            // check if 'info' needs to be suspended:","                            (otherLevelMessage=instance._lastMessage[INFO]) && ((level!==INFO) || instance._lastMessage[WARN] || instance._lastMessage[ERROR]) &&","                                (otherLevelMessage[SUSPENDED]=true) && instance._suspend(otherLevelMessage);","                            // check if 'warn' needs to be suspended:","                            (otherLevelMessage=instance._lastMessage[WARN]) && ((level===ERROR) || instance._lastMessage[ERROR]) && (otherLevelMessage[SUSPENDED]=true) &&","                                instance._suspend(otherLevelMessage);","/*jshint expr:false */","                            resolve(itsamessage);","                        }","                    });","                }","            });","        }","    );","};","","/**"," * Starts processing a queue-level. This will make messages (Y.ITSAMessage-instances) to be taken from Y.ITSAMessageController's queue and"," * to be handled by a descendant messageviewer, f.i. like Y.ITSADialog."," *"," * @method _processQueue"," * @param level {String} queue-level, should be either 'info', 'warn' or 'error'"," * @private"," * @since 0.1","*/","ITSAMessageViewer.prototype._processQueue = function(level) {","    var instance = this,","        handlePromise, handlePromiseLoop;","    handlePromise = function() {","        return instance._nextMessagePromise(level).then(","            function(itsamessage) {","                itsamessage[PROCESSING] = true;","/*jshint expr:true */","                (itsamessage[TIMEOUTRESOLVE] || itsamessage[TIMEOUTREJECT]) && itsamessage._startTimer();","/*jshint expr:false */","                return instance.viewMessage(itsamessage);","            }","        ).then(","            null,","            function(err) {","                // unfortunatly we cannot fire or log an error, because that could be caught by Y.ITSADialog and become a loop in the messageview","                // MUST log 'info'","            }","        );","    };","    handlePromiseLoop = function() {","        // will loop until rejected, which is at destruction of the class","        return instance.get(DESTROYED) || handlePromise().then(handlePromiseLoop, handlePromiseLoop);","    };","    handlePromiseLoop();","};","","/**"," * Calls resurrect() and also starts Y.ITSAMessage.timer - if appropriate."," *"," * @method _resurrect"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @private"," * @since 0.1","*/","ITSAMessageViewer.prototype._resurrect = function(itsamessage) {","    var instance = this;","    // should be overridden --> method that renderes the message in the dom","    if (!itsamessage.get(DESTROYED)) {","    /*jshint expr:true */","        (itsamessage[TIMEOUTRESOLVE] || itsamessage[TIMEOUTREJECT]) && itsamessage._startTimer();","    /*jshint expr:false */","        // first: play sound again:","        Y.ITSAMessageController.sound(itsamessage);","        instance.resurrect(itsamessage);","    }","};","","/**"," * Calls suspend() and also interrupts Y.ITSAMessage.timer - if appropriate."," *"," * @method _suspend"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @private"," * @since 0.1","*/","ITSAMessageViewer.prototype._suspend = function(itsamessage) {","    var instance = this;","/*jshint expr:true */","    (itsamessage[TIMEOUTRESOLVE] || itsamessage[TIMEOUTREJECT]) && itsamessage._stopTimer();","/*jshint expr:false */","    instance.suspend(itsamessage);","};","","/**"," * Views the message through viewMessage(), but also makes the Y.ITSAMessage-instance create sound<br>"," *"," * @method _viewMessage"," * @param itsamessage {Y.ITSAMessage} the Y.ITSAMessage-instance to be viewed."," * @private"," * @return {Y.Promise}"," * @since 0.1","*/","ITSAMessageViewer.prototype._viewMessage = function(itsamessage) {","    // should be overridden --> method that renderes the message in the dom","    Y.ITSAMessageController.sound(itsamessage);","    return this.viewMessage(itsamessage);","};","","Y.ITSAMessageViewer = ITSAMessageViewer;","","// define public methods:","","/**"," * Informs the user with a message and three buttons: 'abort', 'ignore', 'retry'.<br>"," * The promise can resolve by either 'ignore' or 'retry' and will reject by 'abort'. Once resolved, look for result.button"," * to find out which button the user pressed.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getRetryConfirmation"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton ('btn_retry') is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Check 'button' to find out what button was pressed."," *                     resolve(result) --> result.button==='ignore' || 'retry' OR reject(reason) --> reason==='abort' or error"," * @since 0.1","*/","Y[GET_RETRY_CONFIRMATION] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_RETRY_CONFIRMATION], ITSAMessageControllerInstance);","","/**"," * Alias for Y.getConfirmation.<br>"," * Informs the user with a message and two buttons: 'no' and 'yes'.<br>"," * The promise can resolve by 'yes and will reject by 'no'."," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.confirm"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton 'btn_yes' is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolves by 'ok' and rejects by 'no'."," * @since 0.1","*/","","/**"," * Informs the user with a message and two buttons: 'no' and 'yes'.<br>"," * The promise can resolve by 'yes and will reject by 'no'."," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getConfirmation"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton 'btn_yes' is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolves by 'ok' and rejects by 'no'."," * @since 0.1","*/","Y.confirm = Y[GET_CONFIRMATION] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_CONFIRMATION], ITSAMessageControllerInstance);","","/**"," * Asks the user for an url.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getURL"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.formconfig] {Object} Config that passes through to the UI-element. See Y.ITSAFormModel for usage of formconfig.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.required] {Boolean} Makes the input required: the promise cannot be rejected, there is no cancel or close-button.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved","     * @param [config.validationerror] {String} Message that Y.Tipsy uses when validation fails.","     * @param [config.validator] {Function} Validator function for the UI-element","     * @param [config.value] {Any} Initial value that passes through to the UI-element."," * @return {Y.Promise} Promise that holds the user-response."," *                     resolve(result) --> result.input===the url OR reject(reason) --> reason==='cancel' or error"," * @since 0.1","*/","Y[GET_URL] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_URL], ITSAMessageControllerInstance);","","/**"," * Asks the user for an emailaddress.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getEmail"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.formconfig] {Object} Config that passes through to the UI-element. See Y.ITSAFormModel for usage of formconfig.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.required] {Boolean} Makes the input required: the promise cannot be rejected, there is no cancel or close-button.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved","     * @param [config.validationerror] {String} Message that Y.Tipsy uses when validation fails.","     * @param [config.validator] {Function} Validator function for the UI-element","     * @param [config.value] {Any} Initial value that passes through to the UI-element."," * @return {Y.Promise} Promise that holds the user-response."," *                     resolve(result) --> result.input===the emailaddress OR reject(reason) --> reason==='cancel' or error"," * @since 0.1","*/","Y[GET_EMAIL] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_EMAIL], ITSAMessageControllerInstance);","","/**"," * Alias for Y.getInput.<br>"," * Asks the user for any input.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.prompt"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.formconfig] {Object} Config that passes through to the UI-element. See Y.ITSAFormModel for usage of formconfig.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.required] {Boolean} Makes the input required: the promise cannot be rejected, there is no cancel or close-button.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.textarea] {Boolean} Render a textarea instead of an input-element.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved","     * @param [config.validationerror] {String} Message that Y.Tipsy uses when validation fails.","     * @param [config.validator] {Function} Validator function for the UI-element","     * @param [config.value] {Any} Initial value that passes through to the UI-element."," * @return {Y.Promise} Promise that holds the user-response."," *                     resolve(result) --> result.input===the input OR reject(reason) --> reason==='cancel' or error"," * @since 0.1","*/","","/**"," * Asks the user for any input.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getInput"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.formconfig] {Object} Config that passes through to the UI-element. See Y.ITSAFormModel for usage of formconfig.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.required] {Boolean} Makes the input required: the promise cannot be rejected, there is no cancel or close-button.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.textarea] {Boolean} Render a textarea instead of an input-element.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved","     * @param [config.validationerror] {String} Message that Y.Tipsy uses when validation fails.","     * @param [config.validator] {Function} Validator function for the UI-element","     * @param [config.value] {Any} Initial value that passes through to the UI-element."," * @return {Y.Promise} Promise that holds the user-response."," *                     resolve(result) --> result.input===the input OR reject(reason) --> reason==='cancel' or error"," * @since 0.1","*/","Y.prompt = Y[GET_INPUT] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_INPUT], ITSAMessageControllerInstance);","","/**"," * Asks the user for a number.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.getNumber"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.formconfig] {Object} Config that passes through to the UI-element. See Y.ITSAFormModel for usage of formconfig.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.required] {Boolean} Makes the input required: the promise cannot be rejected, there is no cancel or close-button.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved","     * @param [config.validationerror] {String} Message that Y.Tipsy uses when validation fails.","     * @param [config.validator] {Function} Validator function for the UI-element","     * @param [config.value] {Any} Initial value that passes through to the UI-element."," * @return {Y.Promise} Promise that holds the user-response."," *                     resolve(result) --> result.number===the number OR reject(reason) --> reason==='cancel' or error"," * @since 0.1","*/","Y[GET_NUMBER] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_NUMBER], ITSAMessageControllerInstance);","","/**"," * Shows a message.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.showMessage"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolved once the user presses the 'ok'-button."," * @since 0.1","*/","Y[SHOW_MESSAGE] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_MESSAGE], ITSAMessageControllerInstance);","","/**"," * Alias for Y.showWarning.<br>"," * Shows a warning. Because the level will be 'warn', the message has precedence above normal messages.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.alert"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolved once the user presses the 'ok'-button."," * @since 0.1","*/","","/**"," * Shows a warning. Because the level will be 'warn', the message has precedence above normal messages.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.showWarning"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolved once the user presses the 'ok'-button."," * @since 0.1","*/","Y.alert = Y[SHOW_WARNING] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_WARNING], ITSAMessageControllerInstance);","","/**"," * Shows an error. Because the level will be 'error', the message has precedence above warnings and normal messages.<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.showError"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolved once the user presses the 'ok'-button."," * @since 0.1","*/","Y[SHOW_ERROR] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_ERROR], ITSAMessageControllerInstance);","","/**"," * Returns a promise with reference to the ITSAMessage-instance. The message itself is NOT fullfilled yet!<br>"," * Because there are no buttons to make it fullfilled, you must fullfil the message through itsamessage.resolve() or itsamessage.reject()<br>"," * <b>Note:</b> You need a descendant of Y.ITSAMessageViewer (f.i. Y.ITSADialog) to make the message be displayed!"," *"," * @method Y.showStatus"," * @param [title] {String} The title of the message"," * @param [message] {String} The message"," * @param [config] {Object} Config passed through to the Y.ITSAMessage instance and the next additional properties:","     * @param [config.closeButton] {Boolean} whether the closebutton should be visible.","     *                               By setting this, you the default setting of closeButton is overruled.","     * @param [config.icon] {String} Classname of the iconfont, for instance 'itsaicon-dialog-info' --> see gallerycss-itsa-base for more info about iconfonts.","     *                               By setting this, you the default icon is overruled.","     * @param [config.imageButtons] {Boolean} Whether to display imagebuttons.","     * @param [config.level] {String} The message-level, should be either 'info', warn' or 'error'.","     * @param [config.priority] {boolean} By setting this, the message will be positioned in the queue above messages that have no priority.","     * @param [config.primaryButton] {String} Name of the primary button, f.i. 'btn_ok'.","     *                               By setting this, you the default primaryButton is overruled.","     * @param [config.source] {String} Identification of the source (sender) of the message, which is 'application' by default.","     * @param [config.target] {String} Classname of the Y.ITSAMessageViewer that is targeted and should hanlde the message.","     * @param [config.timeoutReject] {Number} Timeout after which the message's visiblilty should be rejected","     * @param [config.timeoutResolve] {Number} Timeout after which the message's visiblilty should be resolved"," * @return {Y.Promise} Promise that holds the user-response. Resolves or rejects manually."," * @since 0.1","*/","Y[SHOW_STATUS] = Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_STATUS], ITSAMessageControllerInstance);","","}, '@VERSION@', {","    \"requires\": [","        \"yui-base\",","        \"yui-later\",","        \"timers\",","        \"promise\",","        \"gallery-itsamodulesloadedpromise\",","        \"gallery-itsamessagecontroller\"","    ]","});","","}());"]};
}
var __cov_txyE0gLtgLEWSON5vNGHVQ = __coverage__['build/gallery-itsamessageviewer/gallery-itsamessageviewer.js'];
__cov_txyE0gLtgLEWSON5vNGHVQ.s['1']++;YUI.add('gallery-itsamessageviewer',function(Y,NAME){'use strict';__cov_txyE0gLtgLEWSON5vNGHVQ.f['1']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['2']++;var YArray=Y.Array,ITSAMessageControllerInstance=Y.ITSAMessageController,ESSAGE='essage',MESSAGE='m'+ESSAGE,MAIL='mail',LOADICONSDELAY=5000,PROCESSING='_processing',ERROR='error',WARN='warn',INFO='info',LEVEL='level',TARGET='target',SUSPENDED='_suspended',NEWMESSAGE='new'+MESSAGE,DESTROYED='destroyed',PRIORITY='priority',EVT_LEVELCLEAR='levelclear',TIMEOUTRESOLVE='timeoutResolve',TIMEOUTREJECT='timeoutReject',GET='get',SHOW='show',CONFIRMATION='Confirmation',GET_RETRY_CONFIRMATION=GET+'Retry'+CONFIRMATION,GET_CONFIRMATION=GET+CONFIRMATION,GET_INPUT=GET+'Input',GET_NUMBER=GET+'Number',GET_EMAIL=GET+'E'+MAIL,GET_URL=GET+'URL',SHOW_MESSAGE=SHOW+'M'+ESSAGE,SHOW_WARNING=SHOW+'Warning',SHOW_ERROR=SHOW+'Error',SHOW_STATUS=SHOW+'Status',UNDERSCORE='_',AVAILABLE_LEVELS={info:true,warn:true,error:true};__cov_txyE0gLtgLEWSON5vNGHVQ.s['3']++;function ITSAMessageViewer(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['2']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['4']++;ITSAMessageViewer.superclass.constructor.apply(this,arguments);}__cov_txyE0gLtgLEWSON5vNGHVQ.s['5']++;ITSAMessageViewer.NAME='itsamessageviewer';__cov_txyE0gLtgLEWSON5vNGHVQ.s['6']++;Y.extend(ITSAMessageViewer,Y.Base);__cov_txyE0gLtgLEWSON5vNGHVQ.s['7']++;ITSAMessageViewer.prototype.initializer=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['3']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['8']++;var instance=this;__cov_txyE0gLtgLEWSON5vNGHVQ.s['9']++;instance.simpleMessages=false;__cov_txyE0gLtgLEWSON5vNGHVQ.s['10']++;instance._lastMessage={};__cov_txyE0gLtgLEWSON5vNGHVQ.s['11']++;Y.ITSAMessageController.addTarget(instance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['12']++;Y.later(LOADICONSDELAY,Y,Y.usePromise,['gallerycss-itsa-base','gallerycss-itsa-animatespin','gallerycss-itsa-form']);__cov_txyE0gLtgLEWSON5vNGHVQ.s['13']++;instance._processQueue(INFO);__cov_txyE0gLtgLEWSON5vNGHVQ.s['14']++;instance._processQueue(WARN);__cov_txyE0gLtgLEWSON5vNGHVQ.s['15']++;instance._processQueue(ERROR);};__cov_txyE0gLtgLEWSON5vNGHVQ.s['16']++;ITSAMessageViewer.prototype.handleLevel=function(level){__cov_txyE0gLtgLEWSON5vNGHVQ.f['4']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['17']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['1'][0]++,AVAILABLE_LEVELS[level])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['1'][1]++,Y.ITSAMessageController._targets[level]=this.constructor.NAME);__cov_txyE0gLtgLEWSON5vNGHVQ.s['18']++;console.log(this.constructor.NAME);};__cov_txyE0gLtgLEWSON5vNGHVQ.s['19']++;ITSAMessageViewer.prototype.resurrect=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['5']++;};__cov_txyE0gLtgLEWSON5vNGHVQ.s['20']++;ITSAMessageViewer.prototype.suspend=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['6']++;};__cov_txyE0gLtgLEWSON5vNGHVQ.s['21']++;ITSAMessageViewer.prototype.viewMessage=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['7']++;};__cov_txyE0gLtgLEWSON5vNGHVQ.s['22']++;ITSAMessageViewer.prototype.destructor=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['8']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['23']++;var instance=this;__cov_txyE0gLtgLEWSON5vNGHVQ.s['24']++;Y.ITSAMessageController.removeTarget(instance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['25']++;instance._lastMessage={};};__cov_txyE0gLtgLEWSON5vNGHVQ.s['26']++;ITSAMessageViewer.prototype._nextMessagePromise=function(level){__cov_txyE0gLtgLEWSON5vNGHVQ.f['9']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['27']++;var instance=this,messageController=Y.ITSAMessageController;__cov_txyE0gLtgLEWSON5vNGHVQ.s['28']++;return messageController.isReady().then(function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['10']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['29']++;var proceed=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['2'][0]++,level===ERROR)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['2'][1]++,!instance._lastMessage[ERROR])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['2'][2]++,level===WARN)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['2'][3]++,!instance._lastMessage[WARN]));__cov_txyE0gLtgLEWSON5vNGHVQ.s['30']++;return(__cov_txyE0gLtgLEWSON5vNGHVQ.b['3'][0]++,proceed)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['3'][1]++,new Y.Promise(function(resolve){__cov_txyE0gLtgLEWSON5vNGHVQ.f['11']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['31']++;var listener=instance.on(EVT_LEVELCLEAR,function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['12']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['32']++;proceed=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['4'][0]++,!instance._lastMessage[ERROR])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['4'][1]++,level===WARN)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['4'][2]++,!instance._lastMessage[WARN]));__cov_txyE0gLtgLEWSON5vNGHVQ.s['33']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['5'][0]++,proceed)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['5'][1]++,listener.detach())&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['5'][2]++,resolve());});}));}).then(function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['13']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['34']++;return new Y.Promise(function(resolve,reject){__cov_txyE0gLtgLEWSON5vNGHVQ.f['14']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['35']++;var queue=messageController.queue,name=instance.constructor.NAME,handleAnonymous=messageController._targets[level]===name,nextMessage,listener,otherLevelMessage,destroylistener,isTargeted;__cov_txyE0gLtgLEWSON5vNGHVQ.s['36']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['6'][0]++,instance.get(DESTROYED))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['6'][1]++,reject());__cov_txyE0gLtgLEWSON5vNGHVQ.s['37']++;YArray.some(queue,function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['15']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['38']++;isTargeted=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['7'][0]++,itsamessage[TARGET]===name)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['7'][1]++,!itsamessage[TARGET])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['7'][2]++,handleAnonymous);__cov_txyE0gLtgLEWSON5vNGHVQ.s['39']++;nextMessage=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][0]++,isTargeted)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][1]++,itsamessage[LEVEL]===level)&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][2]++,!instance.simpleMessages)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][3]++,itsamessage._simpleMessage))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][4]++,itsamessage[PRIORITY])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][5]++,!itsamessage[PROCESSING])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['8'][6]++,itsamessage);__cov_txyE0gLtgLEWSON5vNGHVQ.s['40']++;return nextMessage;});__cov_txyE0gLtgLEWSON5vNGHVQ.s['41']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['9'][0]++,nextMessage)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['9'][1]++,YArray.some(queue,function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['16']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['42']++;isTargeted=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['10'][0]++,itsamessage[TARGET]===name)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['10'][1]++,!itsamessage[TARGET])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['10'][2]++,handleAnonymous);__cov_txyE0gLtgLEWSON5vNGHVQ.s['43']++;nextMessage=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][0]++,isTargeted)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][1]++,itsamessage[LEVEL]===level)&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][2]++,!instance.simpleMessages)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][3]++,itsamessage._simpleMessage))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][4]++,!itsamessage[PRIORITY])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][5]++,!itsamessage[PROCESSING])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['11'][6]++,itsamessage);__cov_txyE0gLtgLEWSON5vNGHVQ.s['44']++;return nextMessage;}));__cov_txyE0gLtgLEWSON5vNGHVQ.s['45']++;if(nextMessage){__cov_txyE0gLtgLEWSON5vNGHVQ.b['12'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['46']++;instance._lastMessage[level]=nextMessage;__cov_txyE0gLtgLEWSON5vNGHVQ.s['47']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][0]++,otherLevelMessage=instance._lastMessage[INFO])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][1]++,level!==INFO)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][2]++,instance._lastMessage[WARN])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][3]++,instance._lastMessage[ERROR]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][4]++,otherLevelMessage[SUSPENDED]=true)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['13'][5]++,instance._suspend(otherLevelMessage));__cov_txyE0gLtgLEWSON5vNGHVQ.s['48']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['14'][0]++,otherLevelMessage=instance._lastMessage[WARN])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['14'][1]++,level===ERROR)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['14'][2]++,instance._lastMessage[ERROR]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['14'][3]++,otherLevelMessage[SUSPENDED]=true)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['14'][4]++,instance._suspend(otherLevelMessage));__cov_txyE0gLtgLEWSON5vNGHVQ.s['49']++;resolve(nextMessage);}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['12'][1]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['50']++;if(level===ERROR){__cov_txyE0gLtgLEWSON5vNGHVQ.b['15'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['51']++;otherLevelMessage=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['16'][0]++,instance._lastMessage[WARN])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['16'][1]++,instance._lastMessage[INFO]);}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['15'][1]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['52']++;if((__cov_txyE0gLtgLEWSON5vNGHVQ.b['18'][0]++,level===WARN)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['18'][1]++,!instance._lastMessage[ERROR])){__cov_txyE0gLtgLEWSON5vNGHVQ.b['17'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['53']++;otherLevelMessage=instance._lastMessage[INFO];}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['17'][1]++;}}__cov_txyE0gLtgLEWSON5vNGHVQ.s['54']++;if((__cov_txyE0gLtgLEWSON5vNGHVQ.b['20'][0]++,otherLevelMessage)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['20'][1]++,otherLevelMessage[SUSPENDED])){__cov_txyE0gLtgLEWSON5vNGHVQ.b['19'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['55']++;otherLevelMessage[SUSPENDED]=false;__cov_txyE0gLtgLEWSON5vNGHVQ.s['56']++;instance._resurrect(otherLevelMessage);}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['19'][1]++;}__cov_txyE0gLtgLEWSON5vNGHVQ.s['57']++;instance._lastMessage[level]=null;__cov_txyE0gLtgLEWSON5vNGHVQ.s['58']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['21'][0]++,level!==INFO)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['21'][1]++,instance.fire(EVT_LEVELCLEAR));__cov_txyE0gLtgLEWSON5vNGHVQ.s['59']++;destroylistener=instance.once('destroy',reject);__cov_txyE0gLtgLEWSON5vNGHVQ.s['60']++;listener=Y.on(NEWMESSAGE,function(e){__cov_txyE0gLtgLEWSON5vNGHVQ.f['17']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['61']++;var itsamessage=e.itsamessage,isTargeted=(__cov_txyE0gLtgLEWSON5vNGHVQ.b['22'][0]++,itsamessage[TARGET]===name)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['22'][1]++,!itsamessage[TARGET])&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['22'][2]++,handleAnonymous);__cov_txyE0gLtgLEWSON5vNGHVQ.s['62']++;if((__cov_txyE0gLtgLEWSON5vNGHVQ.b['24'][0]++,isTargeted)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['24'][1]++,itsamessage[LEVEL]===level)){__cov_txyE0gLtgLEWSON5vNGHVQ.b['23'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['63']++;listener.detach();__cov_txyE0gLtgLEWSON5vNGHVQ.s['64']++;destroylistener.detach();__cov_txyE0gLtgLEWSON5vNGHVQ.s['65']++;instance._lastMessage[level]=itsamessage;__cov_txyE0gLtgLEWSON5vNGHVQ.s['66']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][0]++,otherLevelMessage=instance._lastMessage[INFO])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][1]++,level!==INFO)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][2]++,instance._lastMessage[WARN])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][3]++,instance._lastMessage[ERROR]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][4]++,otherLevelMessage[SUSPENDED]=true)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['25'][5]++,instance._suspend(otherLevelMessage));__cov_txyE0gLtgLEWSON5vNGHVQ.s['67']++;(__cov_txyE0gLtgLEWSON5vNGHVQ.b['26'][0]++,otherLevelMessage=instance._lastMessage[WARN])&&((__cov_txyE0gLtgLEWSON5vNGHVQ.b['26'][1]++,level===ERROR)||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['26'][2]++,instance._lastMessage[ERROR]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['26'][3]++,otherLevelMessage[SUSPENDED]=true)&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['26'][4]++,instance._suspend(otherLevelMessage));__cov_txyE0gLtgLEWSON5vNGHVQ.s['68']++;resolve(itsamessage);}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['23'][1]++;}});}});});};__cov_txyE0gLtgLEWSON5vNGHVQ.s['69']++;ITSAMessageViewer.prototype._processQueue=function(level){__cov_txyE0gLtgLEWSON5vNGHVQ.f['18']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['70']++;var instance=this,handlePromise,handlePromiseLoop;__cov_txyE0gLtgLEWSON5vNGHVQ.s['71']++;handlePromise=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['19']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['72']++;return instance._nextMessagePromise(level).then(function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['20']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['73']++;itsamessage[PROCESSING]=true;__cov_txyE0gLtgLEWSON5vNGHVQ.s['74']++;((__cov_txyE0gLtgLEWSON5vNGHVQ.b['27'][0]++,itsamessage[TIMEOUTRESOLVE])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['27'][1]++,itsamessage[TIMEOUTREJECT]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['27'][2]++,itsamessage._startTimer());__cov_txyE0gLtgLEWSON5vNGHVQ.s['75']++;return instance.viewMessage(itsamessage);}).then(null,function(err){__cov_txyE0gLtgLEWSON5vNGHVQ.f['21']++;});};__cov_txyE0gLtgLEWSON5vNGHVQ.s['76']++;handlePromiseLoop=function(){__cov_txyE0gLtgLEWSON5vNGHVQ.f['22']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['77']++;return(__cov_txyE0gLtgLEWSON5vNGHVQ.b['28'][0]++,instance.get(DESTROYED))||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['28'][1]++,handlePromise().then(handlePromiseLoop,handlePromiseLoop));};__cov_txyE0gLtgLEWSON5vNGHVQ.s['78']++;handlePromiseLoop();};__cov_txyE0gLtgLEWSON5vNGHVQ.s['79']++;ITSAMessageViewer.prototype._resurrect=function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['23']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['80']++;var instance=this;__cov_txyE0gLtgLEWSON5vNGHVQ.s['81']++;if(!itsamessage.get(DESTROYED)){__cov_txyE0gLtgLEWSON5vNGHVQ.b['29'][0]++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['82']++;((__cov_txyE0gLtgLEWSON5vNGHVQ.b['30'][0]++,itsamessage[TIMEOUTRESOLVE])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['30'][1]++,itsamessage[TIMEOUTREJECT]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['30'][2]++,itsamessage._startTimer());__cov_txyE0gLtgLEWSON5vNGHVQ.s['83']++;Y.ITSAMessageController.sound(itsamessage);__cov_txyE0gLtgLEWSON5vNGHVQ.s['84']++;instance.resurrect(itsamessage);}else{__cov_txyE0gLtgLEWSON5vNGHVQ.b['29'][1]++;}};__cov_txyE0gLtgLEWSON5vNGHVQ.s['85']++;ITSAMessageViewer.prototype._suspend=function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['24']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['86']++;var instance=this;__cov_txyE0gLtgLEWSON5vNGHVQ.s['87']++;((__cov_txyE0gLtgLEWSON5vNGHVQ.b['31'][0]++,itsamessage[TIMEOUTRESOLVE])||(__cov_txyE0gLtgLEWSON5vNGHVQ.b['31'][1]++,itsamessage[TIMEOUTREJECT]))&&(__cov_txyE0gLtgLEWSON5vNGHVQ.b['31'][2]++,itsamessage._stopTimer());__cov_txyE0gLtgLEWSON5vNGHVQ.s['88']++;instance.suspend(itsamessage);};__cov_txyE0gLtgLEWSON5vNGHVQ.s['89']++;ITSAMessageViewer.prototype._viewMessage=function(itsamessage){__cov_txyE0gLtgLEWSON5vNGHVQ.f['25']++;__cov_txyE0gLtgLEWSON5vNGHVQ.s['90']++;Y.ITSAMessageController.sound(itsamessage);__cov_txyE0gLtgLEWSON5vNGHVQ.s['91']++;return this.viewMessage(itsamessage);};__cov_txyE0gLtgLEWSON5vNGHVQ.s['92']++;Y.ITSAMessageViewer=ITSAMessageViewer;__cov_txyE0gLtgLEWSON5vNGHVQ.s['93']++;Y[GET_RETRY_CONFIRMATION]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_RETRY_CONFIRMATION],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['94']++;Y.confirm=Y[GET_CONFIRMATION]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_CONFIRMATION],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['95']++;Y[GET_URL]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_URL],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['96']++;Y[GET_EMAIL]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_EMAIL],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['97']++;Y.prompt=Y[GET_INPUT]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_INPUT],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['98']++;Y[GET_NUMBER]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+GET_NUMBER],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['99']++;Y[SHOW_MESSAGE]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_MESSAGE],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['100']++;Y.alert=Y[SHOW_WARNING]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_WARNING],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['101']++;Y[SHOW_ERROR]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_ERROR],ITSAMessageControllerInstance);__cov_txyE0gLtgLEWSON5vNGHVQ.s['102']++;Y[SHOW_STATUS]=Y.bind(ITSAMessageControllerInstance[UNDERSCORE+SHOW_STATUS],ITSAMessageControllerInstance);},'@VERSION@',{'requires':['yui-base','yui-later','timers','promise','gallery-itsamodulesloadedpromise','gallery-itsamessagecontroller']});
