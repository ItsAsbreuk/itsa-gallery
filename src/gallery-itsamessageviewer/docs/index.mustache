{{>api-button}}
<div class="intro">
    <p>
        {{description}}
    </p>
    <p>
         Y.ITSAMessageViewer is the (abstract) View of the <b>ITSA-MVC-message system</b>. The developer should use a descendant Class to view the messages. ViewInstance kan show messages that are put in the MVC-queue by several statements like Y.showMessage() f.i. Also, Y.Model and Y.ModelList can send messages during asynchronous requests, which can be handled by a MessageViewer like <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsastatusbar/">gallery-itsastatusbar</a>.
     </p>
</div>

{{>getting-started}}

<h2>Description</h2>

    <p>
        Y.ITSAMessageController is the Controller of the <b>ITSA-MVC-message system</b> where messages of the type Y.ITSAMessage can be added and viewed by a subClass of Y.ITSAMessageViewer
    </p>

    <h3>the Controller</h3>
    <p>
        <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> takes care of the messages by an internal queue. All messages that are added, should be of the (sub)Class <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a>. Adding a message to the queue is done by calling Y.ITSAMessageController.queueMessage(yourMessage). See its documentation.
    </p>

    <h3>the Models</h3>
    <p>
        The Models that are added to the queue should be of the type <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a> or a subClass. See its documentation.
    </p>

    <h3>the View</h3>
    <p>
        The View should be done by a subClass of Y.ITSAMessageViewer. Currently, there are 2 different Views available: <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> and <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsastatusbar/">Y.ITSAStatusbar</a>.
    </p>
    <p>
        The Views will handle the messages from the queue, one by one. If there gets a message in the queue that has a higher <code>Y.ITSAMessage.level</code> (warn>info, error>warn), then previous 'lower-level' messages get suspended and the higher message shows up. The lower-message will resurrect once the higher-message disapears. Inside the same level, messages can be given a priority by setting ITSAMessage.priority=true. This wil not result into suspension, but makes the message being placed in its own queue (info, warn or error) just above the last 'non-priority'-message.
    </p>
    <p>
        <b>Note:</b> there is also the module <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsalogin/">gallery-itsalogin</a>, which is not a messageviewer, but just introduces Y.login() which can be viewed through Y.ITSADialog.
    </p>


<h2>Usage</h2>
    <p>
        This Class should not be used itself, but should be extended. See <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> as an example.
    </p>
    <h3>creating a subClass</h3>
    <p>
        When creating a subClass, it is essential to override these three methods:
        <ul>
            <li>resurrect(itsamessage) --> method that renderes the Y.ITSAMessage-instance in the dom</li>
            <li>suspend(itsamessage) --> method that renderes the Y.ITSAMessage-instance in the dom</li>
            <li>viewMessage(itsamessage) --> does the actual view of the Y.ITSAMessage-instance. Should return a Y.Promise that resolves when Y.ITSAMessage._promise gets fulfilled. The subClass also should take care of removing its message-view once the viewMessage-promise is fulfilled.</li>
        </ul>
        <b>Note:</b> it is important that viewMessage returns a Promise that resolves as soon as itsamessage._promise resolves or rejects. Only this way, the queue will get its next message right in time.
    </p>

<h2>How to handle the messages?</h2>
    <p>
        When creating an <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a>, you add it to the queue of <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> and you get a Promise in return. The promise will be resolved once the user finished it by pressing a button - or in some cases automaticly. Messages can be added to the queue by calling <code>Y.ITSAMessageController.queueMessage()</code>, or by any convenience-method.
    </p>
    <p>
        <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessages</a> need be processed by an Y.ITSAMessageViewer-instance. You can target messages to the MessageViewer-instance by <code>yourMessage.addMessageTarget(yourMessageViewer)</code>. If you don't target a message, then it will be processed as an 'untargeted'-message. Each MessageViewer could be set up to handle the 'untargeted'-messages, but only one at a time.
    </p>
    <p>
        If <code>yourMessageViewer.simpleMessages</code> is true, it can only handle simple messages like Y.showMessage, Y.showWarning/Y.alert and Y.showError. These messages only hold simple text with an OK-button (which is up to the View to be rendered or not).
    </p>

    <h3>target specific message</h3>
        <h4>general message</h4>
        <p>
            To target a specific message, you need call <code>yourMessage.addMessageTarget(viewInstance)</code> where 'viewInstance' is the messageView-instance that should handle the message. If you make use if the predefined messages (see below), then you can set config.target=viewInstance inside the config-parameter.
        </p>
        <p>
            <b>Note:</b> when you work with <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaviewmodel/">Y.ITSAViewModel</a>, <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsapanel/">Y.ITSAPanel</a> or <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaviewmodelpanel/">Y.ITSAViewModelPanel</a>, then those instances can be a messagetarget as well, as long as you set their attribute <code>statusBar</code> true.
        </p>
        <h4>modelsync-messages</h4>
        <p>
            Both Y.Model and Y.ModelList can create sync-messages when syncing starts or ends. In order to get this facility, you need to load <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamodelsyncpromise/">gallery-itsamodelsyncpromise</a> or <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamodellistsyncpromise/">gallery-itsamodellistsyncpromise</a>.
            To make a specific Y.Model-instance (or Y.ModelList-instance) target its syncmessages, you need call <code>yourModel(list).addMessageTarget(viewInstance)</code> where 'viewInstance' is the messageView-instance that should handle the message.
        </p>

    <h3>handling untargeted messages</h3>
    <h4>specific messages</h4>
        <h4>general message</h4>
            <p>
                You can define your messageView-instance to handle untargeted messages by <code>handleLevel(level)</code> --> where level is 'info', 'warn' or 'error'. Note: statusmessages and modelsync-messages are at the level 'info', but are not effected. By default <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> will target the 'general-mesages' of all levels to <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a>.
            </p>
            <p>
                Some general messages can be executed directly on the Y-instance for convenience:
                <ul>
                    <li>Y.showMessage()</li>
                    <li>Y.showWarning()</li>
                    <li>Y.showError()</li>
                </ul>
            </p>

        <h4>status-messages</h4>
            <p>
                You can define your messageView-instance to handle untargeted 'status-messages' by <code>handleStatus(level)</code>.
            </p>
        <h4>modelsync-messages</h4>
            <p>
                You can define your messageView-instance to handle untargeted 'modelsync-messages' by <code>handleModelSync(level)</code>.
            </p>
    <h3>automatic generate simple message by MessageViewer</h3>
        <p>
            This cannot be done for modelsync-messages, because those are automaticly generated messages by the model.
        </p>
        <h4>general message</h4>
            <p>
                Some general messages can be executed directly on the messageView-instance for convenience:
                <ul>
                    <li>showMessage()</li>
                    <li>showWarning()</li>
                    <li>showError()</li>
                </ul>
            </p>
        <h4>status-messages</h4>
            <p>
                Status-messages can be controlled on the messageView-instance for convenience as well:
                <ul>
                    <li>showStatus()</li>
                    <li>removeStatus()</li>
                </ul>
            </p>

<h2>Predefined messages</h2>
    <p>
        Several convenience-methods are created by this module by which messages are added to the queue and will be shown by <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> by default:
        <ul>
            <li><code>Y.getConfirmation</code> or <code>Y.confirm</code></li>
            <li><code>Y.getEmail</code></li>
            <li><code>Y.getInput</code> or <code>Y.prompt</code></li>
            <li><code>Y.getNumber</code></li>
            <li><code>Y.getRetryConfirmation</code></li>
            <li><code>Y.getURL</code></li>
            <li><code>Y.showError</code></li>
            <li><code>Y.showMessage</code></li>
            <li><code>Y.showStatus</code></li>
            <li><code>Y.showWarning</code> or <code>Y.alert</code></li>
        </ul>
        All these methods call Y.ITSAMessageController.queueMessage() under the hood and return a Y.Promise with the future userinput.
    </p>

<h2>licence</h2>
<p class='copyright'>
Copyright (c) 2013 <a href="http://itsasbreuk.nl">Its Asbreuk</a><br />
Copyright (c) 2013 <a href="http://developer.yahoo.com/yui/license.html">YUI BSD License</a>
</p>
