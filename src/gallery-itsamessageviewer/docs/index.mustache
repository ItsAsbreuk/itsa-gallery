{{>api-button}}
<div class="intro">
    <p>
        {{description}}
    </p>
    <p>
         Y.ITSAMessageViewer is the (abstract) View of the <b>ITSA-MVC-message system</b>. The developer should use a descendant Class to view the messages.
     </p>
</div>

{{>getting-started}}

<h2>Description</h2>

    <p>
        Y.ITSAMessageController is the Controller of the <b>ITSA-MVC-message system</b> where messages of the type Y.ITSAMessage can be added and viewed by a subClass of Y.ITSAMessageViewer
    </p>

    <h3>the Controller</h3>
    <p>
        <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> takes care of the messages by an internal queue. All messages that are added, should be of the (sub)Class <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a>. Adding a message to the queue is done by calling Y.ITSAMessageController.queueMessage(yourMessage). See its documentation.
    </p>

    <h3>the Models</h3>
    <p>
        The Models that are added to the queue should be of the type <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a> or a subClass. See its documentation.
    </p>

    <h3>the View</h3>
    <p>
        The View should be done by a subClass of Y.ITSAMessageViewer. Currently, there are 2 different Views available: <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> and <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsastatusbar/">Y.ITSAStatusbar</a>.
    </p>
    <p>
        The Views will handle the messages from the queue, one by one. If there gets a message in the queue that has a higher <code>Y.ITSAMessage.level</code> (warn>info, error>warn), then previous 'lower-level' messages get suspended and the higher message shows up. The lower-message will resurrect once the higher-message disapears. Inside the same level, messages can be given a priority by setting ITSAMessage.priority=true. This wil not result into suspension, but makes the message being placed in its own queue (info, warn or error) just above the last 'non-priority'-message.
    </p>
    <p>
        <b>Note:</b> there is also the module <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">gallery-itsalogin</a>, which is not a messageviewer, but just introduces Y.login() which can be viewed through Y.ITSADialog.
    </p>


<h2>Usage</h2>
    <p>
        This Class should not be used itself, but should be extended. See <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> as an example.
    </p>
    <h3>creating a subClass</h3>
    <p>
        When creating a subClass, it is essential to override these three methods:
        <ul>
            <li>resurrect(itsamessage) --> method that renderes the Y.ITSAMessage-instance in the dom</li>
            <li>suspend(itsamessage) --> method that renderes the Y.ITSAMessage-instance in the dom</li>
            <li>viewMessage(itsamessage) --> does the actual view of the Y.ITSAMessage-instance. Should return a Y.Promise that resolves when Y.ITSAMessage._promise gets fulfilled. The subClass also should take care of removing its message-view once the viewMessage-promise is fulfilled.</li>
        </ul>
        <b>Note:</b> it is important that viewMessage returns a Promise that resolves as soon as itsamessage._promise resolves or rejects. Only this way, the queue will get its next message right in time.
    </p>

    <h3>targeting messages</h3>
    <p>
        Messages (Y.ITSAMessage-instances) need to be told what MessageView-instance they are targetting. This can be done by any seperate message, and it is posible to tell what MessageView-instance should handle the 'untargeted' messages. If yourMessageView.simpleMessages is true, then only Y.showMessage, Y.showWarning/Y.alert and Y.showError are possibly targeted: these only hold simple text with an OK-button (which is up to the View to be rendered or not).
    </p>
    <h4>target specific message</h4>
    <p>
        To target a specific message, you need to set yourMessage.target='viewName' where 'viewName' is the attribute yourMessageView-instance.get('viewName'). If you make use if the predefined messages (see below), then you can set config.target='viewName' inside the config-parameter.
    </p>
    <h4>handling untargeted messages</h4>
    <p>
        You can define your yourMessageView-instance to handle untargeted messages by using: yourMessageView.handleLevel(level), where level is <code>info</code>, <code>warn</code> and/or <code>error</code>. By default <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> will target all these levels to 'itsadialog' which represents <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a>.
    </p>

<h2>Handling messages</h2>
    <p>
        The View will take one message (Y.ITSAMessage-instance) at the time, taken from Y.ITSAMessageController.queue. Once the Y.ITSAMessage-instance is resolved -mostly by the enduser finished it- the View will fulfill the original Y.ITSAMessageController.queueMessage-Promise. When Y.ITSAMessage._promise gets resolved, then Y.ITSAMessageController.queueMessage also resolves, returning the attributes of <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessage/">Y.ITSAMessage</a>. The developer can inspect these values. See <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> for how to use this.
    </p>

<h2>Predefined messages</h2>
    <p>
        Several convenience-methods are created by this module by which messages are added to the queue and will be shown by <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a> by default:
        <ul>
            <li><code>Y.getConfirmation</code> or <code>Y.confirm</code></li>
            <li><code>Y.getEmail</code></li>
            <li><code>Y.getInput</code> or <code>Y.prompt</code></li>
            <li><code>Y.getNumber</code></li>
            <li><code>Y.getRetryConfirmation</code></li>
            <li><code>Y.getURL</code></li>
            <li><code>Y.showError</code></li>
            <li><code>Y.showMessage</code></li>
            <li><code>Y.showStatus</code></li>
            <li><code>Y.showWarning</code> or <code>Y.alert</code></li>
        </ul>
        All these methods call Y.ITSAMessageController.queueMessage() under the hood and return a Y.Promise with the future userinput.
    </p>

<h2>licence</h2>
<p class='copyright'>
Copyright (c) 2013 <a href="http://itsasbreuk.nl">Its Asbreuk</a><br />
Copyright (c) 2013 <a href="http://developer.yahoo.com/yui/license.html">YUI BSD License</a>
</p>
