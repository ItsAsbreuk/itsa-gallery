{{>api-button}}

<div class="intro">
    <p>
        {{description}}
    </p>
    <p>
        Using this module you can create Y.ITSAStatusbar-instances, which can be used by the webapplication. By default, the main window gets a statusbar at the bottom. This can be changed by specifying the attribute <code>parentNode</code>. Y.ITSAStatusbar is a MessageViewer of the <b>ITSA-MVC-message system</b> where Y.ITSAMessageController is the controller and messages of the type Y.ITSAMessage can be added.
    </p>
    <p>
        You could also choose to make use of other MessageViewers. Create one of your own (see <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessageviewer/">Y.ITSAMessageViewer</a>), or use <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a>, which also is a MessageViewer. Or use multiple and target which MessageViewer to handle what messages.
    </p>
    <p>
        <b>Note:</b> Y.ITSAStatusbar can only handle 'simple-messages' like Y.showMessage, Y.showWarning/Y.alert and Y.showError. These messages only hold simple text with an OK-button. If you should target any 'non-simple'-message - like Y.getInput() - the message not get in the message-queue and its return-promise will be rejected. This situation is not the case when you apply yourStatusBar.handleLevel() (see below).
    </p>
</div>

{{>getting-started}}

<h2>Description</h2>
    <p>
        You need to render is Y.ITSAStatusbar-instance and 'tell' the <code>ITSA-MVC-message system</code> what messages it should handle. When adding messages to the queue of the <code>ITSA-MVC-message system</code>, your statusbar will then pick them up and show them.
    </p>

<h2>Usage</h2>
    <p>
        The MessageView will take one message (Y.ITSAMessage-instance) at the time, taken from Y.ITSAMessageController.queue. Once the Y.ITSAMessage-instance is resolved -mostly by the enduser clicks the generated 'close-button'- the View will fulfill the original Y.ITSAMessageController.queueMessage-Promise which makes the message to disappear.

    ```js
        YUI(yuiconfig).use('gallery-itsastatusbar', function(Y) {

            var statusbar = new Y.ITSAStatusbar();

            statusbar.handleLevel('error');
            Y.showError('this is error');

        });
    ```
    </p>

<h2>How to handle the messages?</h2>
    <p>
        Y.ITSAStatusbar can only handle 'simple-messages'. These messages are generated by the statusbar-instance, or by the Y-instance:
        <u>Methods by statusbar-instance:</u>
        <ul>
            <li><code>yourstatusbar.showError</code></li>
            <li><code>yourstatusbar.showMessage</code></li>
            <li><code>yourstatusbar.showStatus</code></li>
            <li><code>yourstatusbar.showWarning</code> or <code>yourstatusbar.alert</code></li>
        </ul>
        <u>Methods by Y-instance:</u>
        <ul>
            <li><code>Y.showError</code></li>
            <li><code>Y.showMessage</code></li>
            <li><code>Y.showStatus</code></li>
            <li><code>Y.showWarning</code> or <code>Y.alert</code></li>
        </ul>
        All these methods call Y.ITSAMessageController.queueMessage() under the hood.
    </p>
    <p>
        Every message comes in the queue of Y.ITAMEssageController and need be processed by a MessageViewer like Y.ITSAStatusbar. The instance-methods are automaticly handled by the statusbar-instance. The Y-instance-methods called above are 'untargeted'. Because Y.ITSDialog is marked as the default MessageViewer to handle 'general untargeted-messages'.
    </p>

    <h3>target specific message</h3>
        <h4>general message</h4>
        <p>
            To target a specific message, you need call <code>yourMessage.addMessageTarget(statusbarInstance)</code> where 'statusbarInstance' is the statusbar-instance that should handle the message. If you make use if the predefined messages (see below), then you can set config.target=statusbarInstance inside the config-parameter.
        </p>
        <p>
            <b>Note:</b> when you work with <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaviewmodel/">Y.ITSAViewModel</a>, <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsapanel/">Y.ITSAPanel</a> or <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaviewmodelpanel/">Y.ITSAViewModelPanel</a>, then those instances can be a messagetarget as well, as long as you set their attribute <code>statusBar</code> true.
        </p>
        <h4>modelsync-messages</h4>
        <p>
            Both Y.Model and Y.ModelList can create sync-messages when syncing starts or ends. In order to get this facility, you need to load <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamodelsyncpromise/">gallery-itsamodelsyncpromise</a> or <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamodellistsyncpromise/">gallery-itsamodellistsyncpromise</a>, which will be active when use make use of <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaformmodel/">gallery-itsaformmodel</a>. To make a specific Y.Model-instance (or Y.ModelList-instance) target its syncmessages, you need call <code>yourModel(list).addMessageTarget(statusbarInstance)</code> where 'statusbarInstance' is the statusbar-instance that should handle the message.
        </p>

    <h3>handling untargeted messages</h3>
    <h4>specific messages</h4>
        <h4>general message</h4>
            <p>
                You can define your statusbarInstance-instance to handle untargeted messages by <code>handleLevel(level)</code> --> where level is 'info', 'warn' or 'error'. Note: statusmessages and modelsync-messages are at the level 'info', but are not effected. By default <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsamessagecontroller/">Y.ITSAMessageController</a> will target the 'general-mesages' of all levels to <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsadialog/">Y.ITSADialog</a>.
            </p>
            <p>
                Some general messages can be executed directly on the Y-instance for convenience (but you need to target the level first):
                <ul>
                    <li>Y.showMessage()</li>
                    <li>Y.showWarning()</li>
                    <li>Y.showError()</li>
                </ul>
            </p>

        <h4>status-messages</h4>
            <p>
                You can define your messageView-instance to handle untargeted 'status-messages' by <code>handleStatus()</code>.
            </p>
        <h4>modelsync-messages</h4>
            <p>
                You can define your messageView-instance to handle untargeted 'modelsync-messages' by <code>handleModelSync()</code>.
            </p>
    <h3>automatic generate simple message by MessageViewer</h3>
        <p>
            This cannot be done for modelsync-messages, because those are automaticly generated messages by the model.
        </p>
        <h4>general message</h4>
            <p>
                Some general messages can be executed directly on the messageView-instance for convenience:
                <ul>
                    <li>showMessage()</li>
                    <li>showWarning()</li>
                    <li>showError()</li>
                </ul>
            </p>
        <h4>status-messages</h4>
            <p>
                Status-messages can be controlled on the messageView-instance for convenience as well:
                <ul>
                    <li>showStatus()</li>
                    <li>removeStatus()</li>
                </ul>
            </p>

<h2>Different message-levels</h2>
    <p>
        There are three different messagelevels:
        <ul>
            <li>info</li>
            <li>warn</li>
            <li>error</li>
        </ul>
        When a message at warn-level occurs it overrules an info-message - which returns after the warn-message if handled. The same for error-messages, which have a ranking above warn-messages. You can set the message-level by using <code>options.level</code>.
    </p>

<h2>Convenience messages</h2>
    <p>
        Some general messages can be executed directly on the Y-instance for convenience:
        <ul>
            <li>Y.showMessage()</li>
            <li>Y.showWarning()</li>
            <li>Y.showError()</li>
            <li>Y.getConfirmation()</li>
            <li>Y.getEmail()</li>
            <li>Y.getInput()</li>
            <li>Y.getNumber()</li>
            <li>Y.getRetryConfirmation()</li>
            <li>Y.getURL()</li>
            <li>Y.alert()  = alias for showWarning()</li>
            <li>Y.prompt()  = alias for getInput()</li>
            <li>Y.confirm()  = alias for getConfirmation()</li>
        </ul>
    </p>

<h2>Y.ITSADialog v.s. Y.ITSAViewModelPanel</h2>
    <p>
        Y.ITSADialog looks quite the same as <a href="http://gallerydocs.itsasbreuk.nl/gallery-itsaviewmodelpanel/">Y.ITSAViewModelPanel</a>. Actually, it uses Y.ITSAViewModelPanel under the hood. So when to choose one above the other:
    </p>

    <h3>Advantages Y.ITSADialog</h3>
        <ul>
            <li>Messages are queued. So the user will see only 1 message at the time. And when there appears an warn- or error-message during your custom message, your messaga will be temporarely replaced</li>
            <li>You always get the userinteraction in return (the Promise-value)</li>
        </ul>

    <h3>Advantages Y.ITSAViewModelPanel</h3>
        <ul>
            <li>Easier to setup, you just attach a model</li>
            <li>Can handle Y.ITSAFormModel-types, you don't need to create an Y.ITSAMessage</li>
            <li>The model-instance remains, while Y.ITSAMessages are cleaned up by Y.ITSADialog</li>
            <li>You could setup multiple panels at the same time</li>
        </ul>

    <h3>General best practice</h3>
        <p>
            In general, when you want <code>one time modal user-interaction</code> (that is: an 'editable' panel were the model isn't needed for something else), you better create an Y.ITSAMessage and use Y.ITSADialog. In all other situations, use Y.ITSAViewModelPanel.
        </p>


<h2>licence</h2>
<p class= 'copyright'>
Copyright (c) 2013 <a href="http://itsasbreuk.nl">Its Asbreuk</a><br />
Copyright (c) 2013 <a href="http://developer.yahoo.com/yui/license.html">YUI BSD License</a>
</p>