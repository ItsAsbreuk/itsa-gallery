{{>api-button}}

<div class="intro">
  <p>{{description}}</p>
  <p>
      This module is used for creating stringified form-elements using Y.Lang.sub() and templates for all form-elements.
      The rendered strings are used by <code>gallery-itsaeditmodel</code>. It is preferable that you use that module
      to create editable html-elements, because that way thay are related to a Modelinstance.
  </p>
  <p><b>Note:</b> This module is Beta. Needs performanceoptimization and not all elements can be used yet.
</div>

{{>getting-started}}

<h2>Description</h2>

<p>
    The class is used to render the stringified form-elements, based on the attributes that are added. Because the node
    isn't in the dom yet, the idea is to add the <code>nodeid</code> to the rendermethod, along with the config. If you don't pass
    nodeid, then Y.guid() will create a random one.
</p>
<p>
    Y.ITSAFormElement.getElement() returns the element. This is an object that has 3 properties:<br />
    <ul>
      <li>object.html: the stringified element that can be inserted in the dom.</li>
      <li>object.nodeid: the node-id (passed through or generated)</li>
      <li>object.widget: in case of widgets, this is the reference to the widget-instance.</li>
    </ul>
</p>

<h2>Using widgets</h2>
    <p>
        Some elements render the simple form-elements, while other are just empty <code>div's</code> that is used
        to render a widget upon. The rendering is done <u>automaticly</u> every time the node gets in the dom.
    </p>

<h3>How to define a widget</h2>
    <p>
        Instead of passing a string to 'type'-argument, you can pass the Class (not an instance!). The instance will be created and rendered
        full automaticly, passing through 'config'. Just be sure the module that serves the widget is loaded.
    </p>

<h2>Summary of available types</h2>
<h3>Types that return simple elements</h2>
    <ul>
      <li>input</li>
      <li>password</li>
      <li>textarea</li>
      <li>date</li>
      <li>time</li>
      <li>datetime</li>
      <li>reset</li>
      <li>submit</li>
      <li>save</li>
      <li>add</li>
      <li>destroy</li>
      <li>stopedit</li>
      <li>button</li>
      <li>email (not ready yet)</li>
      <li>url (not ready yet)</li>
    </ul>

<h2>Usage</h2>
<h3>Simple form-elements</h2>
```
YUI({gallery: '...'}).use('node-base', 'gallery-itsaformelement', function(Y) {
    var formElement = Y.ITSAFormElement.getElement('input', {value: 'default value'});
    Y.one('#myform').append(formElement.html);
});
```

<h3>Widget-elements</h2>
```
YUI({gallery: '...'}).use('node-base', 'gallery-itsaformelement', 'itsacheckbox', function(Y) {
    var formElement = Y.ITSAFormElement.getElement(Y.ITSACheckbox, {checked: true});
    Y.one('#myform').append(formElement.html);
    // formElement.widget holds the handle to the widgetinstance
});
```
